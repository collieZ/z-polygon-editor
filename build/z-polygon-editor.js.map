{"version":3,"file":"z-polygon-editor.js","sources":["../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/observer.js","../src/utils.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../src/markItem.js","../src/plugins/edit.js","../src/index.js"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default class Observer {\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:06:15\n     * @Desc: 构造函数\n     */\n    constructor () {\n        // 订阅的集合\n        this.observerListeners = {};\n        // 用于删除订阅\n        this.observerToken = 0;\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:06:53\n     * @Desc: 发布话题\n     */\n    publish (topic, ...arg) {\n        if (!topic || !this.observerListeners[topic]) {\n            return false;\n        }\n        let subList = this.observerListeners[topic];\n        for (let i = 0; i < subList.length; i++) {\n            if (subList[i].context) {\n                subList[i].fn.apply(subList[i].context, arg);\n            } else {\n                subList[i].fn.apply(subList[i].fn, arg);\n            }\n        }\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:07:19\n     * @Desc:  订阅某个话题\n     */\n    subscribe (topic, fn) {\n        let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n        if (!this.observerListeners[topic]) {\n            this.observerListeners[topic] = [];\n        }\n        this.observerToken++;\n        this.observerListeners[topic].push({\n            fn: fn,\n            context: context,\n            token: this.observerToken\n        });\n        return this.observerToken;\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:07:46\n     * @Desc:  解除订阅\n     */\n    unsubscribe (token) {\n        if (!token) {\n            return false;\n        }\n        for (let k in this.observerListeners) {\n            if (this.observerListeners.hasOwnProperty(k)) {\n                for (let j = 0; j < this.observerListeners[k].length; j++) {\n                    if (this.observerListeners[k][j].token === token) {\n                        this.observerListeners[k].splice(j, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:08:16\n     * @Desc: 删掉某一类话题及其订阅\n     */\n    clearTopic (topic) {\n        if (!topic) {\n            return false;\n        }\n        for (let k in this.observerListeners) {\n            if (this.observerListeners.hasOwnProperty(k)) {\n                if (k === topic) {\n                    delete this.observerListeners[k];\n                }\n            }\n        }\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:08:35\n     * @Desc: 删除所有话题及订阅\n     */\n    clearAll () {\n        this.observerListeners = {};\n        this.observerToken = 0;\n    }\n}\n","/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-21 20:27:55 \n * @Desc: 判断两条线段是否交叉 \n */\nfunction checkLineSegmentCross(a, b, c, d) {\n  let cross = false\n  // 向量\n  let ab = [b.x - a.x, b.y - a.y]\n  let ac = [c.x - a.x, c.y - a.y]\n  let ad = [d.x - a.x, d.y - a.y]\n  // 向量叉乘，判断点c,d分别在线段ab两侧，条件1\n  let abac = ab[0] * ac[1] - ab[1] * ac[0]\n  let abad = ab[0] * ad[1] - ab[1] * ad[0]\n\n  // 向量\n  let dc = [c.x - d.x, c.y - d.y]\n  let da = [a.x - d.x, a.y - d.y]\n  let db = [b.x - d.x, b.y - d.y]\n  // 向量叉乘，判断点a,b分别在线段dc两侧，条件2\n  let dcda = dc[0] * da[1] - dc[1] * da[0]\n  let dcdb = dc[0] * db[1] - dc[1] * db[0]\n\n  // 同时满足条件1，条件2则线段交叉\n  if (abac * abad < 0 && dcda * dcdb < 0) {\n    cross = true\n  }\n  return cross\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 10:27:00 \n * @Desc: 求点到直线的距离 \n */\nfunction getLinePointDistance(x1, y1, x2, y2, x, y) {\n  // 直线垂直于x轴\n  if (x1 === x2) {\n    return Math.abs(x - x1)\n  } else {\n    let B = 1\n    let A, C\n    A = (y1 - y2) / (x2 - x1)\n    C = 0 - B * y1 - A * x1\n    return Math.abs((A * x + B * y + C) / Math.sqrt(A * A + B * B))\n  }\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 17:28:15 \n * @Desc:  计算两点间连线的倾斜角\n */\nfunction getAngle(x1, y1, x2, y2) {\n  let a = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI\n  return a > 0 ? a - 360 : a\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 14:25:25 \n * @Desc: 根据某条直线上的点x坐标获取y坐标 \n */\nfunction getLinePointYByX(x1, y1, x2, y2, x) {\n  // 直线垂直于x轴\n  if (x1 === x2) {\n    return Math.min(y1, y2)\n  } else {\n    let B = 1\n    let A, C\n    A = (y1 - y2) / (x2 - x1)\n    C = 0 - B * y1 - A * x1\n\n    const getY = (x) => {\n      return (0 - C - A * x) / B\n    }\n\n    return getY(x)\n  }\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 14:11:43 \n * @Desc: 获取某条直线上的所有点 \n */\nfunction getLineAllPoint(x1, y1, x2, y2) {\n  let arr = []\n  // 直线垂直于x轴\n  if (x1 === x2) {\n    let dy = Math.abs(y2 - y1)\n    let min = Math.min(y1, y2)\n    for (let i = 0; i <= dy; i++) {\n      arr.push([x1, min + i])\n    }\n  } else {\n    let B = 1\n    let A, C\n    A = (y1 - y2) / (x2 - x1)\n    C = 0 - B * y1 - A * x1\n\n    const getY = (x) => {\n      return (0 - C - A * x) / B\n    }\n\n    let dx = Math.abs(x2 - x1)\n    let min = Math.min(x1, x2)\n    for (let i = 0; i <= dx; i++) {\n      arr.push([min + i, getY(min + i)])\n    }\n  }\n  return arr\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 09:53:54 \n * @Desc: 两点距离公式 \n */\nfunction getTwoPointDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 17:25:43 \n * @Desc: 获取一条线段上距离某个点最近的点 \n */\nfunction getNearestPointFromLine(x1, y1, x2, y2, x, y) {\n  let arr = getLineAllPoint(x1, y1, x2, y2)\n  let min = Infinity\n  let minPoint = null\n  arr.forEach((item) => {\n    let d = getTwoPointDistance(item[0], item[1], x, y)\n    if (d < min) {\n      min = d\n      minPoint = item\n    }\n  })\n  return minPoint\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-22 10:34:19 \n * @Desc: 加载图片 \n */\nfunction loadImage(src) {\n  return new Promise((resolve, reject) => {\n    let img = new Image()\n    img.onload = () => {\n      resolve(img)\n    }\n    img.onerror = e => {\n      reject(e)\n    }\n    img.src = src\n  })\n}\n\nfunction noop (a, b, c) {}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-15 13:42:44 \n * @Desc: 工具方法 \n */\nexport default {\n  checkLineSegmentCross,\n  loadImage,\n  getTwoPointDistance,\n  getLinePointYByX,\n  getLineAllPoint,\n  getLinePointDistance,\n  getAngle,\n  getNearestPointFromLine,\n  noop\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import utils from './utils'\n\n/*\n// 配置\n{\n    data: null,// 附加数据，可以添加你需要的任何数据\n    lineType: 'line',线段类型，line（普通线段）、borderLine（带边框的线段）、custom（自定义绘图方法）\n    customRenderLine(this){},// 自定义绘制线段的方法\n    strokeStyle: {// 标注轮廓样式\n        lineWidth: 3,\n        strokeColor: 'rgba(0, 136, 255, 1)',\n        lineJoin: 'round',\n        // 如果lineType为borderLine，需要配observer置一下三个属性\n        frontLineWidth: 3,\n        frontStrokeColor: 'rgba(0, 136, 255, 1)',\n        frontLineJoin: 'round'\n    },\n    fillColor: 'rgba(0, 136, 255, 0.5)',// 标注区域填充颜色\n    pointStyle: {// 端点的样式\n        lineWidth: 3,\n        strokeColor: 'rgba(0, 136, 255, 1)',\n        fillColor: 'rgba(0, 136, 255, 0.5)'\n    },\n    dashOffset: [5, 10], // 虚线设置\n    isDash: false,  // 是否以虚线显示\n    pointArr: [// 回显的标注区域数据\n        {\n            data: null,//附加数据\n            pointArr: [{// 点位数据\n                {\"x\":0,\"y\":0}\n            }],\n            strokeStyle: {},\n            fillColor: '',\n            pointStyle:{}\n        }\n    ]\n}\n\n\n*/\n\n// 默认的线条样式\nconst defaultStrokeStyle = {\n    lineWidth: 3,\n    strokeColor: 'rgba(0, 136, 255, 1)',\n    lineJoin: 'round',\n    frontLineWidth: 3,\n    frontStrokeColor: 'rgba(0, 136, 255, 1)',\n    frontLineJoin: 'round',\n    dashOffset: [5, 10]\n}\n// 默认填充样式\nconst defaultFillColor = 'rgba(0, 136, 255, 0.5)'\n// 默认的端点样式\nconst defaultPointStyle = {\n    lineWidth: 3,\n    strokeColor: 'rgba(0, 136, 255, 1)',\n    fillColor: 'rgba(0, 136, 255, 0.5)'\n}\n// 默认配置\nconst defaultOpt = {\n    showPoint: true,\n    pointType: 'square',\n    pointWidth: 3,\n    lineType: 'line',\n    isDash: false\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-09-27 15:12:17 \n * @Desc: 单个标注对象 \n */\nexport default class MarkItem {\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:12:11 \n     * @Desc: 构造函数 \n     */\n    constructor(ctx = null, opt = {}) {\n        // canvas上下文\n        this.ctx = ctx\n        // 配置\n        this.opt = {\n            ...defaultOpt,\n            ...opt\n        }\n        // 附加数据\n        this.data = opt.data || null\n        // 线段绘制样式\n        this.strokeStyle = opt.strokeStyle ? {\n            ...defaultStrokeStyle,\n            ...opt.strokeStyle\n        } : defaultStrokeStyle\n        // 填充样式\n        this.fillColor = opt.fillColor || defaultFillColor\n        // 端点样式\n        this.pointStyle = opt.pointStyle ? {\n            ...defaultPointStyle,\n            ...opt.pointStyle\n        } : defaultPointStyle\n        // 点位数组{x,y}\n        this.pointArr = opt.pointArr || []\n        // 自定义更新端点位置的方法\n        this.updatePointFn = opt.updatePoint\n        // 路径是否已经闭合了\n        this.isClosePath = false\n        // 是否是编辑状态\n        this.isEditing = false\n        // 是否是拖动状态\n        this.isDragging = false\n        // 拖动的端点索引，没有则代表拖拽整体\n        this.dragPointIndex = -1\n        // 点位数组缓存，用于整体拖动\n        this.dragCachePointArr = []\n        // 鼠标滑过显示可选择状态\n        this.hoverActive = false\n        // 是否是闭合绘制模式\n        this.area = opt.area || false\n        // 始终闭合绘制模式下的当前鼠标移动到的非固定点\n        this.areaToPointPos = null\n        // 是否允许新增节点，仅在闭合情况下的编辑期间\n        this.enableAddPoint = opt.enableAddPoint || false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:17:35 \n     * @Desc: 开启编辑 \n     */\n    enable() {\n        this.isEditing = true\n        // 插入虚拟顶点\n        this.insertFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:17:53 \n     * @Desc: 结束编辑 \n     */\n    disable() {\n        this.isEditing = false\n        // 移除虚拟顶点\n        this.removeFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 14:45:32 \n     * @Desc: 获取真实顶点数组 \n     */\n    getTruePointArr() {\n        return this.pointArr.filter((item) => {\n            return !item.fictitious\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:24:50 \n     * @Desc: 端点数量 \n     */\n    getPointLength() {\n        return this.getTruePointArr().length\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:54:50 \n     * @Desc: 添加端点 \n     */\n    pushPoint(x, y) {\n        if (!this.isEditing || this.isClosePath) {\n            return\n        }\n        this.pointArr.push({\n            x,\n            y\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-11-05 10:41:36 \n     * @Desc: 删除某个顶点 \n     */\n    removePoint(index) {\n        // 点击的是虚拟节点直接返回\n        if (this.pointArr[index].fictitious) {\n            return\n        }\n        this.pointArr.splice(index, 1)\n        // 删除后需要重新创建虚拟节点\n        this.removeFictitiousPoints()\n        this.insertFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-22 09:32:47 \n     * @Desc: 始终闭合模式下的当前鼠标移动到的非固定点 \n     */\n    areaToPoint(x, y) {\n        this.areaToPointPos = {\n            x,\n            y\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:57:47 \n     * @Desc: 渲染 \n     */\n    render() {\n        // 填充区域\n        if (this.isClosePath || this.area) {\n            this.renderArea()\n        }\n        // 绘制线段\n        if (this.opt.lineType === 'custom') {\n            this.opt.customRenderLine && this.opt.customRenderLine(this)\n        } else if (this.opt.lineType === 'borderLine') {\n            this.renderLines(this.strokeStyle)\n            this.renderLines({\n                ...this.strokeStyle,\n                lineWidth: this.strokeStyle.frontLineWidth,\n                strokeColor: this.strokeStyle.frontStrokeColor,\n                lineJoin: this.strokeStyle.frontLineJoin\n            })\n        } else {\n            this.renderLines(this.strokeStyle)\n        }\n        // 绘制端点\n        this.renderPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 17:04:16 \n     * @Desc:  填充区域\n     */\n    renderArea() {\n        this.ctx.save()\n        this.ctx.fillStyle = this.fillColor\n        this.ctx.beginPath()\n        let _pointArr = this.pointArr.concat(this.area ? this.areaToPointPos ? [this.areaToPointPos] : [] : [])\n        for (let i = 0; i < _pointArr.length; i++) {\n            let x = _pointArr[i].x\n            let y = _pointArr[i].y\n            if (i === 0) {\n                this.ctx.moveTo(x, y)\n            } else {\n                this.ctx.lineTo(x, y)\n            }\n        }\n        this.ctx.closePath()\n        this.ctx.fill()\n        this.ctx.restore()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:16:37 \n     * @Desc: 绘制线段 \n     */\n    renderLines({\n        lineWidth,\n        strokeColor,\n        lineJoin,\n        dashOffset\n    }, onlyPath) {\n        this.ctx.save()\n        this.ctx.lineWidth = lineWidth\n        this.ctx.strokeStyle = strokeColor\n        this.ctx.lineJoin = lineJoin\n        this.ctx.beginPath()\n        this.opt.isDash ? this.ctx.setLineDash(dashOffset) : utils.noop()\n        let _pointArr = this.pointArr.concat(this.area ? this.areaToPointPos ? [this.areaToPointPos] : [] : [])\n        for (let i = 0; i < _pointArr.length; i++) {\n            let x = _pointArr[i].x\n            let y = _pointArr[i].y\n            if (i === 0) {\n                this.ctx.moveTo(x, y)\n            } else {\n                this.ctx.lineTo(x, y)\n            }\n        }\n        // 闭合路径\n        if (this.isClosePath || this.area) {\n            this.ctx.closePath()\n        }\n        // 不实际绘制出来\n        if (!onlyPath) {\n            this.ctx.stroke()\n        }\n        this.ctx.restore()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 17:54:18 \n     * @Desc:  绘制端点\n     */\n    renderPoints(onlyPath, callback) {\n        for (let i = 0; i < this.pointArr.length; i++) {\n            this.ctx.beginPath()\n            let x = this.pointArr[i].x\n            let y = this.pointArr[i].y\n            if (this.isEditing || onlyPath || this.hoverActive) {\n                this.drawPoint(x, y, onlyPath, false, this.pointArr[i].fictitious)\n                callback && callback(i)\n            }\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 10:48:01 \n     * @Desc: 插入虚拟节点 \n     */\n    insertFictitiousPoints() {\n        if (!this.isEditing || !this.isClosePath || !this.enableAddPoint) {\n            return\n        }\n        // 先去掉虚拟节点\n        this.removeFictitiousPoints()\n\n        let points = []\n        let arr = this.pointArr\n        let len = arr.length\n        for (let i = 0; i < len - 1; i++) {\n            let s = arr[i]\n            let e = arr[i + 1]\n            points.push({\n                x: (s.x + e.x) / 2,\n                y: (s.y + e.y) / 2,\n                fictitious: true\n            })\n        }\n        points.push({\n            x: (arr[len - 1].x + arr[0].x) / 2,\n            y: (arr[len - 1].y + arr[0].y) / 2,\n            fictitious: true\n        })\n        \n        // 插入\n        let newArr = []\n        for (let i = 0; i < this.pointArr.length; i++) {\n            newArr.push(this.pointArr[i])\n            newArr.push(points.shift())\n        }\n\n        this.pointArr = newArr\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 14:07:12 \n     * @Desc:  去掉虚拟节点\n     */\n    removeFictitiousPoints() {\n        this.pointArr = this.getTruePointArr()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 17:57:19 \n     * @Desc: 绘制点 \n     */\n    drawPoint(x, y, onlyPath, beginPath, reverse) {\n        let {\n            customRenderPoint,\n            showPoint,\n            pointType,\n            pointWidth\n        } = this.opt\n        if (beginPath) {\n            this.ctx.beginPath()\n        }\n        // 用户自定义绘制端点方法\n        if (customRenderPoint) {\n            customRenderPoint(this.ctx, x, y, onlyPath, this.pointStyle)\n        } else { // 预定义绘制端点方法\n            this.ctx.save()\n            this.ctx.lineWidth = this.pointStyle.lineWidth\n            this.ctx.strokeStyle = this.pointStyle.strokeColor\n            this.ctx.fillStyle = this.pointStyle.fillColor\n            // 反向样式，边框和填充的颜色互换，用于虚拟节点的显示\n            if (reverse) {\n                this.ctx.strokeStyle = this.pointStyle.fillColor\n                this.ctx.fillStyle = this.pointStyle.strokeColor\n            }\n            switch (pointType) {\n                case 'square':\n                    this.ctx.rect(x - pointWidth, y - pointWidth, pointWidth * 2, pointWidth * 2)\n                    break;\n                case 'circle':\n                    this.ctx.arc(x, y, pointWidth * 2, 0, 2 * Math.PI)\n                    break;\n                default:\n                    break;\n            }\n            // 不实际绘制出来\n            if (!onlyPath) {\n                if (showPoint) {\n                    this.ctx.fill()\n                    this.ctx.stroke()\n                }\n            }\n            this.ctx.restore()\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:14:29 \n     * @Desc: 检测某个点是否在该路径内 \n     */\n    checkInPath(x, y) {\n        this.renderLines(this.strokeStyle, true)\n        return this.ctx.isPointInPath(x, y)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:48:51 \n     * @Desc: 判断某个点是否在某个端点内 \n     */\n    checkInPoints(x, y) {\n        let index = -1\n        this.renderPoints(true, (i) => {\n            if (this.ctx.isPointInPath(x, y)) {\n                index = i\n            }\n        })\n        return index\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:23:34 \n     * @Desc: 闭合路径 \n     */\n    closePath() {\n        this.areaToPointPos = null\n        this.isClosePath = true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 16:54:34 \n     * @Desc: 允许拖动\n     */\n    enableDrag(pointIndex = -1) {\n        this.isDragging = true\n        this.dragPointIndex = pointIndex\n        this.dragCachePointArr = JSON.parse(JSON.stringify(this.pointArr))\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 14:25:32 \n     * @Desc: 获取某个顶点在没有虚拟顶点的情况下的真实索引 \n     */\n    getTruePointIndex(index) {\n        if (index === -1 || this.pointArr[index].fictitious) {\n            return index\n        }\n        let count = 0\n        for (let i = 0; i < index; i++) {\n            if (this.pointArr[i].fictitious) {\n                count++\n            }\n        }\n        return index - count\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 18:33:02 \n     * @Desc: 停止拖动 \n     */\n    disableDrag() {\n        this.isDragging = false\n        this.dragPointIndex = -1\n        this.dragCachePointArr = []\n        // 拖动结束后恢复虚拟节点的创建\n        this.insertFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 17:04:23 \n     * @Desc: 拖动某个端点\n     */\n    dragPoint(x, y) {\n        if (!this.isDragging || this.dragPointIndex === -1) {\n            return\n        }\n        // 拖动的是虚拟点，则转换成真实点\n        if (this.pointArr[this.dragPointIndex].fictitious) {\n            delete this.pointArr[this.dragPointIndex].fictitious\n        }\n        // 获取某个顶点的真实索引\n        this.dragPointIndex = this.getTruePointIndex(this.dragPointIndex)\n        // 拖动时隐藏虚拟节点\n        this.removeFictitiousPoints()\n        if (this.updatePointFn) {\n            this.updatePointFn(this, x, y)\n        } else {\n            this.pointArr.splice(this.dragPointIndex, 1, {\n                ...this.pointArr[this.dragPointIndex],\n                x,\n                y\n            })\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 17:04:32 \n     * @Desc: 拖动整体 \n     */\n    dragAll(ox, oy) {\n        if (!this.isDragging) {\n            return\n        }\n        this.pointArr = this.dragCachePointArr.map((item) => {\n            return {\n                ...item,\n                x: item.x + ox,\n                y: item.y + oy\n            }\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 19:13:34 \n     * @Desc: 显示鼠标滑过时可选择状态\n     */\n    enableHoverActive() {\n        this.hoverActive = true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 19:14:02 \n     * @Desc: 关闭鼠标滑过时可选择状态\n     */\n    disableHoverActive() {\n        this.hoverActive = false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:23:44 \n     * @Desc: 遍历检查线段是否存在交叉情况 \n     */\n    checkLineSegmentCross() {\n        if (!this.checkCrossPrevCheck()) {\n            return false\n        }\n        // 已存在的线段\n        let lineSegments = this.createLineSegments(true)\n        let len = lineSegments.length\n        let cross = false\n        for (let i = 0; i < len; i++) {\n            let item = lineSegments[i]\n            if (this.checkCrossWithLineSegments(item[0], item[1], true)) {\n                cross = true\n            }\n        }\n        return cross\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-22 09:36:33 \n     * @Desc: 检查即将形成的线段是否会存在交叉 \n     */\n    checkNextLineSegmentCross(x, y) {\n        if (!this.checkCrossPrevCheck()) {\n            return false\n        }\n        let arr = this.getTruePointArr()\n        let len = arr.length\n        // 即将形成的线段\n        let c = {\n            x,\n            y\n        }\n        let d = arr[len - 1]\n        return this.checkCrossWithLineSegments(c, d)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-22 09:37:07 \n     * @Desc: 检查最后的闭合线段是否会存在交叉 \n     */\n    checkEndLineSegmentCross() {\n        if (!this.checkCrossPrevCheck()) {\n            return false\n        }\n        let arr = this.getTruePointArr()\n        let len = arr.length\n        let c = arr[len - 1]\n        let d = arr[0]\n        return this.checkCrossWithLineSegments(c, d)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:27:00 \n     * @Desc: 判断某条线段是否会与当前存在的线段交叉 \n     */\n    checkCrossWithLineSegments(c, d, close) {\n        // 已存在的线段\n        let lineSegments = this.createLineSegments(close)\n        let cross = false\n        for (let i = 0; i < lineSegments.length; i++) {\n            let item = lineSegments[i]\n            let a = item[0]\n            let b = item[1]\n            if (utils.checkLineSegmentCross(a, b, c, d)) {\n                cross = true\n            }\n        }\n        return cross\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:24:28 \n     * @Desc: 创建已存在点位组成的线段 \n     */\n    createLineSegments(close) {\n        let arr = this.getTruePointArr()\n        let len = arr.length\n        // 已存在的线段\n        let lineSegments = []\n        for (let i = 0; i < len - 1; i++) {\n            lineSegments.push([\n                arr[i],\n                arr[i + 1]\n            ])\n        }\n        // 包含起点和终点组成的线段\n        if (close) {\n            lineSegments.push([\n                arr[len - 1],\n                arr[0]\n            ])\n        }\n        return lineSegments\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:23:59 \n     * @Desc: 三个端点以下不可能交叉 \n     */\n    checkCrossPrevCheck() {\n        let len = this.getTruePointArr().length\n        // 三个端点以下不可能交叉\n        if (len <= 2) {\n            return false\n        }\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-22 10:37:07 \n     * @Desc: 获取距离某个点最近的线段 \n     */\n    getPintNearestLine(x, y) {\n        let lineSegments = this.createLineSegments(this.isClosePath)\n        if (lineSegments.length <= 0) {\n            return null\n        }\n        if (this.dragPointIndex !== -1) {\n            if (this.dragPointIndex === 0) {\n                lineSegments.splice(0, 1)\n                lineSegments.splice(-1, 1)\n            } else {\n                lineSegments.splice(this.dragPointIndex - 1, 2)\n            }\n        }\n        let minNum = Infinity\n        let minLine\n        for (let i = 0; i < lineSegments.length; i++) {\n            let item = lineSegments[i]\n            let a = item[0]\n            let b = item[1]\n            let d = utils.getLinePointDistance(a.x, a.y, b.x, b.y, x, y)\n            if (d < minNum) {\n                minNum = d\n                minLine = item\n            }\n        }\n        return [minNum, minLine]\n    }\n}","import MarkItem from '../markItem'\n\n/*\n配置\n{\n    value: [\n        {\n            data: null,//附加数据\n            pointArr: [{// 点位数据\n                {\"x\":0,\"y\":0}\n            }],\n            strokeStyle: {},\n            fillColor: '',\n            pointStyle:{}\n        }\n    ],// 回显的标注区域数据\n    fillColor: String, // 标注区域填充颜色\n    strokeStyle: { // 标注轮廓样式\n        lineWidth: 3, // 线条宽度\n        strokeColor: 'rgba(0, 136, 255, 1)', // 线条颜色\n        lineJoin: 'round' // 线条末端样式\n    },\n    pointStyle: {// 端点的样式\n        lineWidth: 3,\n        strokeColor: 'rgba(0, 136, 255, 1)',\n        fillColor: 'rgba(0, 136, 255, 0.5)'\n    },\n    showPoint: true,// 是否绘制端点，默认true\n    pointType: '',// 端点类型，square（正方形）、circle（圆形），默认square\n    pointWidth: 4,// 端点的宽度，正方形的边长的一半、圆形的半径，默认3\n    customRenderPoint(ctx, x, y, onlyPath, pointStyle) {// 自定义绘制端点方法\n        // ctx（canvas绘图上下文）、x,y（中心点的位置）、onlyPath（为true代表用于检测点是否在该端点路径内时调用，此时不应该实际绘制出来，只要绘制路径即可）、pointStyle（端点样式）\n    },\n    max: 3,// 同时最多标注对象数量，默认-1，不限制\n    hoverActive: false,// 鼠标滑过对象时显示可激活状态，默认false\n    readonly: false,// 是否只读，默认false\n    single: false,// 是否编辑某个区域时隐藏其他所有区域，默认false\n    noCrossing: false,// 是否禁止某个标注对象自身线段交叉，和其他标注对象还是可以交叉的\n    dbClickRemovePoint: false,// 是否允许双击顶点删除该顶点\n    area: false,// 区域模式，从始至终都是一个闭合的图形\n    adsorbent: true,// 是否开启吸附效果\n    adsorbentNum: 5,// 吸附的距离，即距离小于等于该值时进行吸附\n    adsorbentLine: true,// 是否允许吸附到线段上\n    dbClickActive: false,// 是否双击激活标注对象，默认为单击激活\n    singleClickComplete: true,// 默认情况下，双击结束编辑，如果该值设为true，除了新增创建期间外的编辑下如果单击了其他区域也可以结束编辑，设为false，即只允许双击结束编辑\n    enableAddPoint: false,// 是否允许新增节点，仅在闭合情况下的编辑期间\n}\n\n属性\n\n事件\nCURRENT-MARK-ITEM-CHANGE（当前激活标注对象变化）\nHOVER-ITEM（鼠标移到某个标注对象区域内）\nCOMPLETE-EDIT-ITEM（双击完成绘制）\nIS-CREATE-MARKING-CHANGE（当前是否在创建中状态变化）\n\n方法\n\n插件开发\n插件需要返回一个promise，resolve之后才会加载下一个插件，所以插件的use顺序十分重要\n*/\n\n// 默认配置\nconst defaultOpt = {\n    value: [],\n    max: -1,\n    hoverActive: false,\n    readonly: false,\n    single: false,\n    noCrossing: false,\n    dbClickRemovePoint: false,\n    area: false,\n    adsorbent: true,\n    adsorbentNum: 5,\n    adsorbentLine: true,\n    dbClickActive: false,\n    singleClickComplete: true,\n    enableAddPoint: false\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-15 10:25:23 \n * @Desc: 编辑插件\n */\nexport default function EditPlugin(instance, utils) {\n    let _resolve = null\n    let promise = new Promise((resolve) => {\n        _resolve = resolve\n    })\n    let opt = {\n        ...defaultOpt,\n        ...instance.opt\n    }\n    // 修改鼠标插件的默认配置\n    if (opt.dbClickActive) {\n        if (instance.opt.cursorTips) {\n            if (!instance.opt.cursorTips.HOVER) {\n                instance.opt.cursorTips.HOVER = '双击激活该区域并进入编辑状态'\n            }\n        } else {\n            instance.opt.cursorTips = {\n                HOVER: '双击激活该区域并进入编辑状态'\n            }\n        }\n    }\n    // 全部的标注对象列表\n    let markItemList = []\n    // 当前编辑中的标注对象\n    let curEditingMarkItem = null\n    // 拖动整体时的起始位置\n    let dragStartPos = {\n        x: 0,\n        y: 0\n    }\n    // 缓存一份拖动整体时的起始位置\n    let dragStartPosCache = {\n        x: 0,\n        y: 0\n    }\n    // 编辑中\n    let isReadonly = opt.readonly\n    // 是否新增标注中，不包括闭合后的编辑\n    let isCreateMarking = false\n    // 创建新标注时的配置项\n    let createMarkItemOpt = null\n    // 缓存点位数据\n    let cachePointArr = null\n    // 标注对象递增id\n    let mId = 0\n    // 当前的吸附值，用来在修正点击事件要新增的顶点的坐标值\n    let adsorbentedPos = null\n    // 吸附整体时的偏移量\n    let adsorbentedWholePos = [0, 0]\n    // 用来控制整体吸附后的脱离\n    let adsorbentedWholePosCacheMousePos = {x: 0, y: 0}\n    // 刚才是否处于拖动中，用来修复click事件比mouseup事件慢的问题\n    let lastIsDragging = false\n    // 创建一个只用于渲染吸附时的顶点的标注对象\n    let adsorbentMark = createNewMarkItem()\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 15:54:21 \n     * @Desc: 回显数据 \n     */\n    function reShow() {\n        if (opt.value.length > 0) {\n            opt.value.forEach((item) => {\n                let _markItem = new MarkItem(instance.ctx, {\n                    id: mId++,\n                    ...opt,\n                    ...item,\n                    pointArr: item.pointArr.map((point) => {\n                        return {\n                            x: point.x * instance.canvasEleRectInfo.width,\n                            y: point.y * instance.canvasEleRectInfo.height\n                        }\n                    }),\n                })\n                _markItem.closePath()\n                markItemList.push(_markItem)\n            })\n            render()\n        }\n    }\n    reShow()\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 15:34:49 \n     * @Desc: 获取所有变量的值 \n     */\n    function getState() {\n        return {\n            markItemList,\n            curEditingMarkItem,\n            isReadonly,\n            isCreateMarking\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 16:46:38 \n     * @Desc: 创建新标注对象实例 \n     */\n    function createNewMarkItem(plusOpt = {}) {\n        return new MarkItem(instance.ctx, {\n            id: mId++,\n            ...opt,\n            ...createMarkItemOpt,\n            ...plusOpt,\n            area: opt.area\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:56:19 \n     * @Desc: 绘制 \n     */\n    function render() {\n        instance.clearCanvas()\n        if (opt.single && (curEditingMarkItem || isCreateMarking)) {\n            curEditingMarkItem && curEditingMarkItem.render()\n        } else {\n            markItemList.forEach((item) => {\n                item.render()\n            })\n        }\n        // 渲染吸附提示点\n        if (adsorbentedPos) {\n            adsorbentMark.drawPoint(adsorbentedPos[0], adsorbentedPos[1], false, true)\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:25:19 \n     * @Desc: 清除对象的编辑状态\n     */\n    function disableAllItemsEdit() {\n        markItemList.forEach((item) => {\n            item.disable()\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 19:14:36 \n     * @Desc: 清除对象鼠标滑过显示可选择状态 \n     */\n    function disableAllItemsHoverActive() {\n        markItemList.forEach((item) => {\n            item.disableHoverActive()\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:07:31 \n     * @Desc: 检查包含某个点的标注对象 \n     *  从后往前遍历是因为后面绘制的层级更高\n     */\n    function checkInPathItem(x, y) {\n        for (let i = markItemList.length - 1; i >= 0; i--) {\n            let item = markItemList[i]\n            if (item.checkInPath(x, y) || item.checkInPoints(x, y) !== -1) {\n                return item\n            }\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-11-02 17:48:18 \n     * @Desc: 找出所有包含该点的标注对象 \n     */\n    function checkInPathAllItems(x, y) {\n        let items = []\n        for (let i = markItemList.length - 1; i >= 0; i--) {\n            let item = markItemList[i]\n            if (item.checkInPath(x, y) || item.checkInPoints(x, y) !== -1) {\n                items.push(item) \n            }\n        }\n        return items\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 20:00:59 \n     * @Desc: 获取标注点位数据 \n     */\n    function getMarkData() {\n        return markItemList.map((item) => {\n            let pointArr = item.pointArr.map((point) => {\n                return {\n                    x: point.x / instance.canvasEleRectInfo.width,\n                    y: point.y / instance.canvasEleRectInfo.height\n                }\n            })\n            return {\n                data: item.data,\n                pointArr\n            }\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 11:29:16 \n     * @Desc: 当前是否正在创建新标注中，即当前标注还未闭合 \n     */\n    function getIsCreateIngMarkItem () {\n        return curEditingMarkItem && !curEditingMarkItem.isClosePath\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:41:24 \n     * @Desc: 开启编辑模式 \n     */\n    function enableEdit () {\n        isReadonly = false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 14:58:24 \n     * @Desc: 清除所有状态 \n     */\n    function reset() {\n        disableAllItemsHoverActive()\n        disableAllItemsEdit()\n        setMarkEditItem(null)\n        render()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:41:40 \n     * @Desc: 开启只读模式，返回false代表当前有正在编辑中的对象，不能结束编辑\n     */\n    function disableEdit () {\n        if (getIsCreateIngMarkItem()) {\n            return false\n        }\n        reset()\n        isReadonly = true\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:49:13 \n     * @Desc: 设置当前创建状态\n     */\n    function setIsCreateMarking (state) {\n        if (isReadonly) {\n            return false\n        }\n        isCreateMarking = state\n        instance.observer.publish('IS-CREATE-MARKING-CHANGE', state)\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 11:03:49 \n     * @Desc: 创建新标注，返回false代表不能创建新标注\n     * _opt：配置项，可添加MarkItem的所有配置项\n     */\n    function createMarkItem(_opt = null) {\n        if (getIsCreateIngMarkItem() || isReadonly) {\n            return false\n        }\n        reset()\n        createMarkItemOpt = _opt\n        setIsCreateMarking(true)\n        if (opt.single) {\n            instance.clearCanvas()\n        }\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 18:58:23 \n     * @Desc: 取消/退出创建\n     * single为true的情况下编辑某个区域想要退出时可以调用reset方法\n     */\n    function exitCreate() {\n        if (!isCreateMarking) {\n            return false\n        } \n        setIsCreateMarking(false)\n        if (getIsCreateIngMarkItem()) {\n            let index = markItemList.findIndex((item) => {\n                return item === curEditingMarkItem\n            })\n            markItemList.splice(index, 1)\n        }\n        reset()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:49:13 \n     * @Desc: 设置当前激活标注对象 \n     */\n    function setMarkEditItem (item) {\n        if (isReadonly) {\n            return false\n        }\n        curEditingMarkItem = item\n        instance.observer.publish('CURRENT-MARK-ITEM-CHANGE', item)\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 10:31:25 \n     * @Desc: 删除指定标注对象 \n     */\n    function deleteMarkItem (item) {\n        if (!item) {\n            return false\n        }\n        let index = markItemList.findIndex((i) => {\n            return i === item\n        })\n        if (index !== -1) {\n            if (curEditingMarkItem === item) {\n                setMarkEditItem(null)\n            }\n            let deleteItem = markItemList.splice(index, 1)\n            render()\n            instance.observer.publish('DELETE-MARKING-ITEM', deleteItem[0], index)\n            return true\n        }\n        return false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 10:31:33 \n     * @Desc: 删除所有标注对象 \n     */\n    function deleteAllMarkItem () {\n        markItemList = []\n        setMarkEditItem(null)\n        render()\n        instance.observer.publish('DELETE-ALL-MARKING-ITEM')\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-22 09:50:40 \n     * @Desc: 吸附效果 \n     */\n    function checkAdsorbent(x, y) {\n        if (!opt.adsorbent) {\n            return [x, y]\n        }\n        let min = Infinity\n        let _x = x, _y = y\n        let _adsorbentedPos = null\n        markItemList.forEach((item) => {\n            // 端点\n            item.pointArr.forEach((point, index) => {\n                // 跳过自己和自己的比较\n                if (curEditingMarkItem && item === curEditingMarkItem && item.dragPointIndex === index) {\n                    return\n                }\n                let d = utils.getTwoPointDistance(point.x, point.y, x, y)\n                if (d <= opt.adsorbentNum && d < min) {\n                    min = d\n                    _x = point.x\n                    _y = point.y\n                    _adsorbentedPos = [_x, _y]\n                }\n            })\n            // 线段\n            if (opt.adsorbentLine) {\n                let nearestLine = item.getPintNearestLine(x, y)\n                if (nearestLine && nearestLine[0] <= opt.adsorbentNum) {\n                    let points = nearestLine[1]\n                    let pointA = points[0]\n                    let pointB = points[1]\n                    let minx = Math.min(pointA.x, pointB.x)\n                    let maxx = Math.max(pointA.x, pointB.x)\n                    if (x >= minx && x <= maxx) {\n                        let nearestPoint = utils.getNearestPointFromLine(pointA.x, pointA.y, pointB.x, pointB.y, x, y)\n                        _x = nearestPoint[0]\n                        _y = nearestPoint[1]\n                        _adsorbentedPos = [_x, _y]\n                    }\n                }\n            }\n        })\n        adsorbentedPos = _adsorbentedPos\n        return [_x, _y]\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-23 11:11:01 \n     * @Desc: 吸附整体 \n     */\n    function checkAdsorbentWhole(x, y) {\n        if (!opt.adsorbent) {\n            return [x, y]\n        }\n        let min = Infinity\n        let minPoint = null\n        let minPoint2 = null\n        // 遍历当前图形和其他图形最近的两个顶点\n        curEditingMarkItem.pointArr.forEach((pointItem) => {\n            markItemList.forEach((markItem) => {\n                if (markItem !== curEditingMarkItem) {\n                    markItem.pointArr.forEach((markItemPointItem) =>{\n                        let d = utils.getTwoPointDistance(pointItem.x, pointItem.y, markItemPointItem.x, markItemPointItem.y)\n                        if (d < min) {\n                            min = d\n                            minPoint = pointItem\n                            minPoint2 = markItemPointItem\n                        }\n                    })\n                }\n            })\n        })\n        if (min <= opt.adsorbentNum) {\n            adsorbentedWholePos = [minPoint2.x - minPoint.x, minPoint2.y - minPoint.y]\n            dragStartPos.x -= adsorbentedWholePos[0]\n            dragStartPos.y -= adsorbentedWholePos[1]\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:12:55 \n     * @Desc: 监听单击事件 \n     */\n    instance.on('CLICK', (e) => {\n        if (isReadonly) {\n            return\n        }\n        if (lastIsDragging) {\n            lastIsDragging = false\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        // 检查点击的位置是否存在标注对象\n        let inPathItem = null\n         // 创建新对象\n        if (isCreateMarking) {\n            let _x = x\n            let _y = y\n            // 如果存在吸附数据则使用吸附数据\n            if (adsorbentedPos) {\n                _x = adsorbentedPos[0]\n                _y = adsorbentedPos[1]\n                adsorbentedPos = null\n            }\n            // 当前存在尚未闭合的激活对象\n            if (curEditingMarkItem) {\n                // 检查线段是否交叉\n                if (opt.noCrossing) {\n                    let cross = curEditingMarkItem.checkNextLineSegmentCross(_x, _y)\n                    if (cross) {\n                        instance.observer.publish('LINE-CROSS', curEditingMarkItem)\n                    } else {\n                        curEditingMarkItem.pushPoint(_x, _y)\n                    }\n                } else {\n                    curEditingMarkItem.pushPoint(_x, _y)\n                }\n            } else {// 当前没有这种标注中的对象\n                // 数量判断\n                if (opt.max === -1 || markItemList.length < opt.max) {\n                    disableAllItemsEdit()\n                    setMarkEditItem(createNewMarkItem())\n                    curEditingMarkItem.enable()\n                    curEditingMarkItem.pushPoint(_x, _y)\n                    markItemList.push(curEditingMarkItem)\n                } else { // 超出数量限制\n                    instance.observer.publish('COUNT-LIMIT', curEditingMarkItem)\n                    setIsCreateMarking(false)\n                }\n            }\n        } else if (inPathItem = checkInPathItem(x, y)) { // 当前点击的位置存在标注对象\n            // !(opt.single && curEditingMarkItem) && \n            if (!opt.dbClickActive && !checkInPathAllItems(x, y).includes(curEditingMarkItem)) {\n                if (!opt.single || (opt.single && !curEditingMarkItem)) {\n                    disableAllItemsEdit()\n                    inPathItem.enable()\n                    setMarkEditItem(inPathItem)\n                }\n            }\n        } else {// 点击空白处清除当前所有状态\n            if (!opt.single && opt.singleClickComplete) {\n                reset()\n            }\n        }\n        render()\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:14:57 \n     * @Desc: 监听双击事件 \n     */\n    instance.on('DOUBLE-CLICK', (e) => {\n        if (isReadonly) {\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        // 能否激活其他对象\n        let canActive = true\n        // 检查当前双击的位置最上层的编辑对象\n        let inPathItem = checkInPathItem(x, y)\n        // 检查当前双击的对象是否和当前编辑中的对象是同一个\n        let isSame = inPathItem && curEditingMarkItem ? inPathItem === curEditingMarkItem : false\n        // 当前存在编辑中的对象\n        if (curEditingMarkItem) {\n            // 点击的是顶点\n            let inPointIndex = curEditingMarkItem.checkInPoints(x, y)\n            if (opt.dbClickRemovePoint && inPointIndex !== -1) {\n                canActive = false\n                if (curEditingMarkItem.getPointLength() > 3) {\n                    curEditingMarkItem.removePoint(inPointIndex)\n                    render()\n                } else {\n                    instance.observer.publish('NOT-ENOUGH-POINTS-REMOVE', curEditingMarkItem)\n                }\n            } else {\n                // 端点数量不足三个\n                if (curEditingMarkItem.getPointLength() < 3) {\n                    canActive = false\n                    instance.observer.publish('NOT-ENOUGH-END-POINTS', curEditingMarkItem)\n                } else if (opt.noCrossing && curEditingMarkItem.checkEndLineSegmentCross()) {// 线段存在交叉\n                    canActive = false\n                    instance.observer.publish('LINE-CROSS', curEditingMarkItem)\n                } else {\n                    if (isCreateMarking) {\n                        instance.observer.publish('COMPLETE-CREATE-ITEM', curEditingMarkItem, e)\n                    }\n                    setIsCreateMarking(false)\n                    curEditingMarkItem.closePath()\n                    curEditingMarkItem.disable()\n                    adsorbentedPos = null\n                    setMarkEditItem(null)\n                    render()\n                    instance.observer.publish('COMPLETE-EDIT-ITEM', curEditingMarkItem, e)\n                }\n            }\n        }\n        // 双击激活标注对象\n        if (opt.dbClickActive && !isCreateMarking && canActive && inPathItem && !isSame) {\n            disableAllItemsEdit()\n            inPathItem.enable()\n            setMarkEditItem(inPathItem)\n            render()\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:43:14 \n     * @Desc: 监听鼠标按下事件 \n     */\n    instance.on('MOUSEDOWN', (e) => {\n        if (isReadonly) {\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        if (!curEditingMarkItem || !curEditingMarkItem.isEditing || !curEditingMarkItem.isClosePath) {\n            return\n        }\n        // 判断是否在端点内\n        let inPointIndex = curEditingMarkItem.checkInPoints(x, y)\n        // 是否在路径内\n        let isInPath = curEditingMarkItem.checkInPath(x, y)\n        if (isInPath || inPointIndex !== -1) {\n            if (opt.noCrossing) {\n                cachePointArr = JSON.parse(JSON.stringify(curEditingMarkItem.pointArr))\n            }\n            dragStartPos.x = x\n            dragStartPos.y = y\n            dragStartPosCache.x = x\n            dragStartPosCache.y = y\n            curEditingMarkItem.enableDrag(inPointIndex)\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 16:57:32 \n     * @Desc: 监听鼠标移动事件 \n     */\n    instance.on('MOUSEMOVE', (e) => {\n        if (isReadonly) {\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        // 拖动编辑\n        if (curEditingMarkItem && curEditingMarkItem.isDragging) {\n            if (curEditingMarkItem.dragPointIndex !== -1) {// 拖动单个顶点\n                curEditingMarkItem.dragPoint(...checkAdsorbent(x, y))\n            } else {// 拖动整体图形\n                checkAdsorbentWhole()\n                // 控制吸附后的脱离\n                if (adsorbentedWholePos[0] !== 0 && adsorbentedWholePos[1] !== 0 && adsorbentedWholePosCacheMousePos.x === 0 && adsorbentedWholePosCacheMousePos.y === 0) {\n                    adsorbentedWholePosCacheMousePos.x = x\n                    adsorbentedWholePosCacheMousePos.y = y\n                }\n                if (adsorbentedWholePosCacheMousePos.x !== 0 && adsorbentedWholePosCacheMousePos.y !== 0) {\n                    if (utils.getTwoPointDistance(adsorbentedWholePosCacheMousePos.x, adsorbentedWholePosCacheMousePos.y, x, y) > opt.adsorbentNum) {\n                        adsorbentedWholePos = [0, 0]\n                        dragStartPos.x = dragStartPosCache.x\n                        dragStartPos.y = dragStartPosCache.y\n                        adsorbentedWholePosCacheMousePos.x = 0\n                        adsorbentedWholePosCacheMousePos.y = 0\n                    }\n                }\n                let ox = x - dragStartPos.x\n                let oy = y - dragStartPos.y\n                curEditingMarkItem.dragAll(ox, oy)\n            }\n            render()\n            let inPointIndex = curEditingMarkItem.checkInPoints(x, y)\n            instance.observer.publish('HOVER-ITEM', curEditingMarkItem, curEditingMarkItem, checkInPathAllItems(x, y), e, inPointIndex)\n        } else if(isCreateMarking) {// 创建新标注中\n            let ox = x - dragStartPos.x\n            let oy = y - dragStartPos.y\n            let apos = checkAdsorbent(ox, oy)\n            // 始终闭合模式\n            if (opt.area && curEditingMarkItem) {\n                curEditingMarkItem.areaToPoint(...apos)\n            }\n            render()\n        } else if(!isCreateMarking){// 显示可选择状态\n            let inPathItem = checkInPathItem(x, y)\n            // 鼠标滑过显示可选择状态\n            if (opt.hoverActive && (!curEditingMarkItem || curEditingMarkItem.isClosePath)) {\n                disableAllItemsHoverActive()\n                inPathItem && inPathItem.enableHoverActive()\n                render()\n            }\n            if (inPathItem && inPathItem.isClosePath) {\n                let inPointIndex = inPathItem.checkInPoints(x, y)\n                instance.observer.publish('HOVER-ITEM', inPathItem, curEditingMarkItem, checkInPathAllItems(x, y), e, inPointIndex)\n            }\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 18:31:56 \n     * @Desc: 监听鼠标松开事件 \n     */\n    instance.on('MOUSEUP', (e) => {\n        if (isReadonly) {\n            return\n        }\n        if (curEditingMarkItem && curEditingMarkItem.isDragging) {\n            lastIsDragging = true\n            curEditingMarkItem.disableDrag()\n            dragStartPos.x = 0\n            dragStartPos.y = 0\n            dragStartPosCache.x = 0\n            dragStartPosCache.y = 0\n            if (opt.noCrossing && curEditingMarkItem.checkLineSegmentCross()) {\n                instance.observer.publish('LINE-CROSS', curEditingMarkItem)\n                curEditingMarkItem.pointArr = cachePointArr\n                cachePointArr = null\n            }\n            render()\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:42:10 \n     * @Desc: 暴露方法给实例引用 \n     */\n    instance._disableAllItemsEdit = disableAllItemsEdit\n    instance._setMarkEditItem = setMarkEditItem\n    instance._createNewMarkItem = createNewMarkItem\n    instance._setIsCreateMarking = setIsCreateMarking\n    instance._render = render\n    instance._disableAllItemsHoverActive = disableAllItemsHoverActive\n    instance._checkInPathItem = checkInPathItem\n    instance._checkInPathAllItems = checkInPathAllItems\n    instance._getIsCreateIngMarkItem = getIsCreateIngMarkItem\n\n    instance.getState = getState\n    instance.getMarkData = getMarkData\n    instance.enableEdit = enableEdit\n    instance.disableEdit = disableEdit\n    instance.deleteMarkItem = deleteMarkItem\n    instance.deleteAllMarkItem = deleteAllMarkItem\n    instance.createMarkItem = createMarkItem\n    instance.exitCreate = exitCreate\n    instance.reset = reset\n\n    _resolve()\n    return promise\n}","import Observer from './observer'\nimport utils from './utils'\nimport editPlugin from './plugins/edit'\n\n/*\n配置\n{\n    el: Object, // 容器元素，dom元素或选择器字符串\n    dbClickTime: 200,// 双击间隔事件，默认200ms\n}\n\n事件\non(event, callback)，事件监听，CLICK、DOUBLE-CLICK、MOUSEDOWN、MOUSEMOVE、MOUSEUP、MOUSEENTER、MOUSELEAVE、WINDOW-CLICK\n*/\n\n// 默认配置\nconst defaultOpt = {\n    dbClickTime: 200,\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-09-27 14:02:06 \n * @Desc: 标注库 \n */\nclass Markjs {\n    static pluginList = []\n\n    \n    static use(plugin, index = -1) {\n        if (!plugin) {\n            return\n        }\n        if (plugin.used) {\n            return this\n        }\n        plugin.used = true\n        if (index === -1) {\n            Markjs.pluginList.push(plugin)\n        } else {\n            Markjs.pluginList.splice(index, 0, plugin)\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:02:12 \n     * @Desc: 构造函数 \n     */\n    constructor(opt = {}) {\n        if (!opt.el) {\n            throw new Error('el属性为空')\n        }\n        // 配置项\n        this.opt = {\n            ...defaultOpt,\n            ...opt\n        }\n        // 容器元素\n        this.el = typeof opt.el === 'string' ? document.querySelector(opt.el) : opt.el\n        if (!this.el) {\n            throw new Error('容器元素获取失败')\n        }\n        // 容器元素的尺寸信息\n        this.elRectInfo = null\n        // canvas元素\n        this.canvasEle = null\n        // 绘图元素尺寸信息\n        this.canvasEleRectInfo = null\n        // 绘图上下文\n        this.ctx = null\n        // 单击定时器\n        this.clickTimer = null\n        // 发布订阅对象\n        this.observer = new Observer()\n        // 鼠标按下的位置\n        this.mousedownPos = {\n            x: 0,\n            y: 0\n        }\n        // 鼠标松开的位置\n        this.mouseupPos = {\n            x: 0,\n            y: 0\n        }\n        // 鼠标上次点击的时间\n        this.lastClickTime = 0\n\n        // 固化事件函数的this\n        this.bindEventCallback()\n        // 初始化\n        this.init()\n        // 注册插件\n        this.usePlugins()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 10:35:33 \n     * @Desc: 注册插件 \n     */\n    usePlugins() {\n        let index = 0\n        let len = Markjs.pluginList.length\n        let loopUse = () => {\n            if (index >= len) {\n                return\n            }\n            let cur = Markjs.pluginList[index]\n            cur(this, utils).then(() => {\n                index++\n                loopUse()\n            })\n        }\n        loopUse()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 13:54:58 \n     * @Desc: 监听事件 \n     */\n    on(event, callback) {\n        return this.observer.subscribe(event, callback)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 13:56:06 \n     * @Desc: 解除监听事件 \n     */\n    off(token) {\n        this.observer.unsubscribe(token)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:06:54 \n     * @Desc: 初始化 \n     */\n    init() {\n        this.createElement()\n        this.ctx = this.canvasEle.getContext('2d')\n        this.bindEvent()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:11:03 \n     * @Desc: 销毁 \n     */\n    destroy() {\n        this.unbindEvent()\n        this.el.removeChild(this.canvasEle)\n        this.observer.publish('DESTORY')\n        this.observer.clearAll()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:26:19 \n     * @Desc: 创建元素 \n     */\n    createElement() {\n        this.elRectInfo = this.el.getBoundingClientRect()\n        let {\n            width,\n            height\n        } = this.elRectInfo\n        this.canvasEle = document.createElement('canvas')\n        this.canvasEle.width = width\n        this.canvasEle.height = height\n        this.canvasEleRectInfo = {\n            width,\n            height\n        }\n        this.el.appendChild(this.canvasEle)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 16:55:53 \n     * @Desc:  固化事件函数的this\n     */\n    bindEventCallback() {\n        this.onclick = this.onclick.bind(this)\n        this.onmousedown = this.onmousedown.bind(this)\n        this.onmousemove = this.onmousemove.bind(this)\n        this.onmouseup = this.onmouseup.bind(this)\n        this.onmouseenter = this.onmouseenter.bind(this)\n        this.onmouseleave = this.onmouseleave.bind(this)\n        this.onWindowClick = this.onWindowClick.bind(this)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:55:12 \n     * @Desc: 绑定事件 \n     */\n    bindEvent() {\n        this.canvasEle.addEventListener('click', this.onclick)\n        this.canvasEle.addEventListener('mousedown', this.onmousedown)\n        this.canvasEle.addEventListener('mousemove', this.onmousemove)\n        window.addEventListener('mouseup', this.onmouseup)\n        this.canvasEle.addEventListener('mouseenter', this.onmouseenter)\n        this.canvasEle.addEventListener('mouseleave', this.onmouseleave)\n        window.addEventListener('click', this.onWindowClick)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:57:23 \n     * @Desc: 解绑事件 \n     */\n    unbindEvent() {\n        this.canvasEle.removeEventListener('click', this.onclick)\n        this.canvasEle.removeEventListener('mousedown', this.onmousedown)\n        this.canvasEle.removeEventListener('mousemove', this.onmousemove)\n        window.removeEventListener('mouseup', this.onmouseup)\n        this.canvasEle.removeEventListener('mouseenter', this.onmouseenter)\n        this.canvasEle.removeEventListener('mouseleave', this.onmouseleave)\n        window.removeEventListener('click', this.onWindowClick)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:04:50 \n     * @Desc: 单击事件 \n     */\n    onclick(e) {\n        if (this.clickTimer) {\n            clearTimeout(this.clickTimer)\n            this.clickTimer = null\n        }\n\n        this.clickTimer = setTimeout(() => {\n            this.observer.publish('CLICK', e)\n        }, this.opt.dbClickTime);\n\n        if (Date.now() - this.lastClickTime <= this.opt.dbClickTime) {\n            clearTimeout(this.clickTimer)\n            this.clickTimer = null\n            this.lastClickTime = 0\n            this.observer.publish('DOUBLE-CLICK', e)\n        }\n\n        this.lastClickTime = Date.now()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:02:26 \n     * @Desc: 鼠标按下事件 \n     */\n    onmousedown(e) {\n        this.mousedownPos = {\n            x: e.clientX,\n            y: e.clientY\n        }\n        this.observer.publish('MOUSEDOWN', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:02:26 \n     * @Desc: 鼠标移动事件 \n     */\n    onmousemove(e) {\n        this.observer.publish('MOUSEMOVE', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:02:26 \n     * @Desc: 鼠标松开事件 \n     */\n    onmouseup(e) {\n        this.mouseupPos = {\n            x: e.clientX,\n            y: e.clientY\n        }\n        this.observer.publish('MOUSEUP', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:05:29 \n     * @Desc: 鼠标移入事件 \n     */\n    onmouseenter(e) {\n        this.observer.publish('MOUSEENTER', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:06:28 \n     * @Desc: 鼠标移出事件 \n     */\n    onmouseleave(e) {\n        this.observer.publish('MOUSELEAVE', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:07:31 \n     * @Desc: window的点击事件 \n     */\n    onWindowClick(e) {\n        this.observer.publish('WINDOW-CLICK', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:56:54 \n     * @Desc: 清除画布 \n     */\n    clearCanvas() {\n        this.ctx.clearRect(0, 0, this.canvasEle.width, this.canvasEle.height)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 16:57:03 \n     * @Desc: 鼠标坐标转为相对canvas的坐标 \n     */\n    toCanvasPos(e) {\n        let cx = e.clientX\n        let cy = e.clientY\n        let {\n            left,\n            top\n        } = this.canvasEle.getBoundingClientRect()\n        let x = cx - left\n        let y = cy - top\n        return {\n            x,\n            y\n        }\n    }\n}\n\nMarkjs.use(editPlugin)\n\nexport default Markjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","Observer","observerListeners","observerToken","topic","this","subList","arg","context","fn","apply","arguments","undefined","push","token","k","hasOwnProperty","j","splice","getLineAllPoint","x1","y1","x2","y2","x","arr","dy","Math","abs","min","A","C","dx","getTwoPointDistance","sqrt","pow","checkLineSegmentCross","a","b","c","d","cross","ab","y","ac","ad","abac","abad","dc","da","db","loadImage","src","Promise","resolve","reject","img","Image","onload","onerror","e","getLinePointYByX","getY","getLinePointDistance","B","getAngle","atan2","PI","getNearestPointFromLine","Infinity","minPoint","forEach","item","noop","_arrayLikeToArray","len","arr2","Array","_toConsumableArray","isArray","arrayLikeToArray","arrayWithoutHoles","iter","Symbol","iterator","from","iterableToArray","o","minLen","n","toString","call","slice","constructor","name","test","unsupportedIterableToArray","nonIterableSpread","defaultStrokeStyle","lineWidth","strokeColor","lineJoin","frontLineWidth","frontStrokeColor","frontLineJoin","dashOffset","defaultFillColor","defaultPointStyle","fillColor","defaultOpt","showPoint","pointType","pointWidth","lineType","isDash","MarkItem","ctx","opt","data","strokeStyle","pointStyle","pointArr","updatePointFn","updatePoint","isClosePath","isEditing","isDragging","dragPointIndex","dragCachePointArr","hoverActive","area","areaToPointPos","enableAddPoint","insertFictitiousPoints","removeFictitiousPoints","filter","fictitious","getTruePointArr","index","renderArea","customRenderLine","renderLines","renderPoints","save","fillStyle","beginPath","_pointArr","concat","moveTo","lineTo","closePath","fill","restore","onlyPath","setLineDash","utils","stroke","callback","drawPoint","points","s","newArr","shift","reverse","customRenderPoint","rect","arc","isPointInPath","_this","pointIndex","JSON","parse","stringify","count","getTruePointIndex","ox","oy","map","checkCrossPrevCheck","lineSegments","createLineSegments","checkCrossWithLineSegments","close","minLine","minNum","max","readonly","single","noCrossing","dbClickRemovePoint","adsorbent","adsorbentNum","adsorbentLine","dbClickActive","singleClickComplete","dbClickTime","Markjs","el","Error","document","querySelector","elRectInfo","canvasEle","canvasEleRectInfo","clickTimer","observer","mousedownPos","mouseupPos","lastClickTime","bindEventCallback","init","usePlugins","pluginList","loopUse","cur","then","event","subscribe","unsubscribe","createElement","getContext","bindEvent","unbindEvent","removeChild","publish","clearAll","getBoundingClientRect","width","height","appendChild","onclick","bind","onmousedown","onmousemove","onmouseup","onmouseenter","onmouseleave","onWindowClick","addEventListener","window","removeEventListener","clearTimeout","setTimeout","_this2","Date","now","clientX","clientY","clearRect","cx","cy","left","top","plugin","used","use","_resolve","promise","cursorTips","HOVER","markItemList","curEditingMarkItem","dragStartPos","dragStartPosCache","isReadonly","isCreateMarking","createMarkItemOpt","cachePointArr","mId","adsorbentedPos","adsorbentedWholePos","adsorbentedWholePosCacheMousePos","lastIsDragging","adsorbentMark","createNewMarkItem","plusOpt","id","render","clearCanvas","disableAllItemsEdit","disable","disableAllItemsHoverActive","disableHoverActive","checkInPathItem","checkInPath","checkInPoints","checkInPathAllItems","items","getIsCreateIngMarkItem","reset","setMarkEditItem","setIsCreateMarking","state","checkAdsorbent","_x","_y","_adsorbentedPos","point","nearestLine","getPintNearestLine","pointA","pointB","minx","maxx","nearestPoint","_markItem","on","toCanvasPos","inPathItem","checkNextLineSegmentCross","pushPoint","enable","includes","canActive","isSame","inPointIndex","getPointLength","removePoint","checkEndLineSegmentCross","enableDrag","dragPoint","minPoint2","pointItem","markItem","markItemPointItem","checkAdsorbentWhole","dragAll","apos","areaToPoint","enableHoverActive","disableDrag","_disableAllItemsEdit","_setMarkEditItem","_createNewMarkItem","_setIsCreateMarking","_render","_disableAllItemsHoverActive","_checkInPathItem","_checkInPathAllItems","_getIsCreateIngMarkItem","getState","getMarkData","enableEdit","disableEdit","deleteMarkItem","findIndex","deleteItem","deleteAllMarkItem","createMarkItem","_opt","exitCreate"],"mappings":"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"}