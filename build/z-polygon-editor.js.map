{"version":3,"file":"z-polygon-editor.js","sources":["../src/observer.js","../src/utils.js","../src/markItem.js","../src/plugins/edit.js","../src/index.js"],"sourcesContent":["export default class Observer {\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:06:15\n     * @Desc: 构造函数\n     */\n    constructor () {\n        // 订阅的集合\n        this.observerListeners = {};\n        // 用于删除订阅\n        this.observerToken = 0;\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:06:53\n     * @Desc: 发布话题\n     */\n    publish (topic, ...arg) {\n        if (!topic || !this.observerListeners[topic]) {\n            return false;\n        }\n        let subList = this.observerListeners[topic];\n        for (let i = 0; i < subList.length; i++) {\n            if (subList[i].context) {\n                subList[i].fn.apply(subList[i].context, arg);\n            } else {\n                subList[i].fn.apply(subList[i].fn, arg);\n            }\n        }\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:07:19\n     * @Desc:  订阅某个话题\n     */\n    subscribe (topic, fn) {\n        let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n        if (!this.observerListeners[topic]) {\n            this.observerListeners[topic] = [];\n        }\n        this.observerToken++;\n        this.observerListeners[topic].push({\n            fn: fn,\n            context: context,\n            token: this.observerToken\n        });\n        return this.observerToken;\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:07:46\n     * @Desc:  解除订阅\n     */\n    unsubscribe (token) {\n        if (!token) {\n            return false;\n        }\n        for (let k in this.observerListeners) {\n            if (this.observerListeners.hasOwnProperty(k)) {\n                for (let j = 0; j < this.observerListeners[k].length; j++) {\n                    if (this.observerListeners[k][j].token === token) {\n                        this.observerListeners[k].splice(j, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:08:16\n     * @Desc: 删掉某一类话题及其订阅\n     */\n    clearTopic (topic) {\n        if (!topic) {\n            return false;\n        }\n        for (let k in this.observerListeners) {\n            if (this.observerListeners.hasOwnProperty(k)) {\n                if (k === topic) {\n                    delete this.observerListeners[k];\n                }\n            }\n        }\n    }\n\n    /**\n     * javascript comment\n     * @Author: 王林25\n     * @Date: 2020-07-31 16:08:35\n     * @Desc: 删除所有话题及订阅\n     */\n    clearAll () {\n        this.observerListeners = {};\n        this.observerToken = 0;\n    }\n}\n","/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-21 20:27:55 \n * @Desc: 判断两条线段是否交叉 \n */\nfunction checkLineSegmentCross(a, b, c, d) {\n  let cross = false\n  // 向量\n  let ab = [b.x - a.x, b.y - a.y]\n  let ac = [c.x - a.x, c.y - a.y]\n  let ad = [d.x - a.x, d.y - a.y]\n  // 向量叉乘，判断点c,d分别在线段ab两侧，条件1\n  let abac = ab[0] * ac[1] - ab[1] * ac[0]\n  let abad = ab[0] * ad[1] - ab[1] * ad[0]\n\n  // 向量\n  let dc = [c.x - d.x, c.y - d.y]\n  let da = [a.x - d.x, a.y - d.y]\n  let db = [b.x - d.x, b.y - d.y]\n  // 向量叉乘，判断点a,b分别在线段dc两侧，条件2\n  let dcda = dc[0] * da[1] - dc[1] * da[0]\n  let dcdb = dc[0] * db[1] - dc[1] * db[0]\n\n  // 同时满足条件1，条件2则线段交叉\n  if (abac * abad < 0 && dcda * dcdb < 0) {\n    cross = true\n  }\n  return cross\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 10:27:00 \n * @Desc: 求点到直线的距离 \n */\nfunction getLinePointDistance(x1, y1, x2, y2, x, y) {\n  // 直线垂直于x轴\n  if (x1 === x2) {\n    return Math.abs(x - x1)\n  } else {\n    let B = 1\n    let A, C\n    A = (y1 - y2) / (x2 - x1)\n    C = 0 - B * y1 - A * x1\n    return Math.abs((A * x + B * y + C) / Math.sqrt(A * A + B * B))\n  }\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 17:28:15 \n * @Desc:  计算两点间连线的倾斜角\n */\nfunction getAngle(x1, y1, x2, y2) {\n  let a = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI\n  return a > 0 ? a - 360 : a\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 14:25:25 \n * @Desc: 根据某条直线上的点x坐标获取y坐标 \n */\nfunction getLinePointYByX(x1, y1, x2, y2, x) {\n  // 直线垂直于x轴\n  if (x1 === x2) {\n    return Math.min(y1, y2)\n  } else {\n    let B = 1\n    let A, C\n    A = (y1 - y2) / (x2 - x1)\n    C = 0 - B * y1 - A * x1\n\n    const getY = (x) => {\n      return (0 - C - A * x) / B\n    }\n\n    return getY(x)\n  }\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 14:11:43 \n * @Desc: 获取某条直线上的所有点 \n */\nfunction getLineAllPoint(x1, y1, x2, y2) {\n  let arr = []\n  // 直线垂直于x轴\n  if (x1 === x2) {\n    let dy = Math.abs(y2 - y1)\n    let min = Math.min(y1, y2)\n    for (let i = 0; i <= dy; i++) {\n      arr.push([x1, min + i])\n    }\n  } else {\n    let B = 1\n    let A, C\n    A = (y1 - y2) / (x2 - x1)\n    C = 0 - B * y1 - A * x1\n\n    const getY = (x) => {\n      return (0 - C - A * x) / B\n    }\n\n    let dx = Math.abs(x2 - x1)\n    let min = Math.min(x1, x2)\n    for (let i = 0; i <= dx; i++) {\n      arr.push([min + i, getY(min + i)])\n    }\n  }\n  return arr\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 09:53:54 \n * @Desc: 两点距离公式 \n */\nfunction getTwoPointDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-01-22 17:25:43 \n * @Desc: 获取一条线段上距离某个点最近的点 \n */\nfunction getNearestPointFromLine(x1, y1, x2, y2, x, y) {\n  let arr = getLineAllPoint(x1, y1, x2, y2)\n  let min = Infinity\n  let minPoint = null\n  arr.forEach((item) => {\n    let d = getTwoPointDistance(item[0], item[1], x, y)\n    if (d < min) {\n      min = d\n      minPoint = item\n    }\n  })\n  return minPoint\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-22 10:34:19 \n * @Desc: 加载图片 \n */\nfunction loadImage(src) {\n  return new Promise((resolve, reject) => {\n    let img = new Image()\n    img.onload = () => {\n      resolve(img)\n    }\n    img.onerror = e => {\n      reject(e)\n    }\n    img.src = src\n  })\n}\n\nfunction noop (a, b, c) {}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-15 13:42:44 \n * @Desc: 工具方法 \n */\nexport default {\n  checkLineSegmentCross,\n  loadImage,\n  getTwoPointDistance,\n  getLinePointYByX,\n  getLineAllPoint,\n  getLinePointDistance,\n  getAngle,\n  getNearestPointFromLine,\n  noop\n}","import utils from './utils'\n\n/*\n// 配置\n{\n    data: null,// 附加数据，可以添加你需要的任何数据\n    lineType: 'line',线段类型，line（普通线段）、borderLine（带边框的线段）、custom（自定义绘图方法）\n    customRenderLine(this){},// 自定义绘制线段的方法\n    strokeStyle: {// 标注轮廓样式\n        lineWidth: 3,\n        strokeColor: 'rgba(0, 136, 255, 1)',\n        lineJoin: 'round',\n        // 如果lineType为borderLine，需要配observer置一下三个属性\n        frontLineWidth: 3,\n        frontStrokeColor: 'rgba(0, 136, 255, 1)',\n        frontLineJoin: 'round'\n    },\n    fillColor: 'rgba(0, 136, 255, 0.5)',// 标注区域填充颜色\n    pointStyle: {// 端点的样式\n        lineWidth: 3,\n        strokeColor: 'rgba(0, 136, 255, 1)',\n        fillColor: 'rgba(0, 136, 255, 0.5)'\n    },\n    dashOffset: [5, 10], // 虚线设置\n    isDash: false,  // 是否以虚线显示\n    pointArr: [// 回显的标注区域数据\n        {\n            data: null,//附加数据\n            pointArr: [{// 点位数据\n                {\"x\":0,\"y\":0}\n            }],\n            strokeStyle: {},\n            fillColor: '',\n            pointStyle:{}\n        }\n    ]\n}\n\n\n*/\n\n// 默认的线条样式\nconst defaultStrokeStyle = {\n    lineWidth: 3,\n    strokeColor: 'rgba(0, 136, 255, 1)',\n    lineJoin: 'round',\n    frontLineWidth: 3,\n    frontStrokeColor: 'rgba(0, 136, 255, 1)',\n    frontLineJoin: 'round',\n    dashOffset: [5, 10]\n}\n// 默认填充样式\nconst defaultFillColor = 'rgba(0, 136, 255, 0.5)'\n// 默认的端点样式\nconst defaultPointStyle = {\n    lineWidth: 3,\n    strokeColor: 'rgba(0, 136, 255, 1)',\n    fillColor: 'rgba(0, 136, 255, 0.5)'\n}\n// 默认配置\nconst defaultOpt = {\n    showPoint: true,\n    pointType: 'square',\n    pointWidth: 3,\n    lineType: 'line',\n    isDash: false\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-09-27 15:12:17 \n * @Desc: 单个标注对象 \n */\nexport default class MarkItem {\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:12:11 \n     * @Desc: 构造函数 \n     */\n    constructor(ctx = null, opt = {}) {\n        // canvas上下文\n        this.ctx = ctx\n        // 配置\n        this.opt = {\n            ...defaultOpt,\n            ...opt\n        }\n        // 附加数据\n        this.data = opt.data || null\n        // 线段绘制样式\n        this.strokeStyle = opt.strokeStyle ? {\n            ...defaultStrokeStyle,\n            ...opt.strokeStyle\n        } : defaultStrokeStyle\n        // 填充样式\n        this.fillColor = opt.fillColor || defaultFillColor\n        // 端点样式\n        this.pointStyle = opt.pointStyle ? {\n            ...defaultPointStyle,\n            ...opt.pointStyle\n        } : defaultPointStyle\n        // 点位数组{x,y}\n        this.pointArr = opt.pointArr || []\n        // 自定义更新端点位置的方法\n        this.updatePointFn = opt.updatePoint\n        // 路径是否已经闭合了\n        this.isClosePath = false\n        // 是否是编辑状态\n        this.isEditing = false\n        // 是否是拖动状态\n        this.isDragging = false\n        // 拖动的端点索引，没有则代表拖拽整体\n        this.dragPointIndex = -1\n        // 点位数组缓存，用于整体拖动\n        this.dragCachePointArr = []\n        // 鼠标滑过显示可选择状态\n        this.hoverActive = false\n        // 是否是闭合绘制模式\n        this.area = opt.area || false\n        // 始终闭合绘制模式下的当前鼠标移动到的非固定点\n        this.areaToPointPos = null\n        // 是否允许新增节点，仅在闭合情况下的编辑期间\n        this.enableAddPoint = opt.enableAddPoint || false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:17:35 \n     * @Desc: 开启编辑 \n     */\n    enable() {\n        this.isEditing = true\n        // 插入虚拟顶点\n        this.insertFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:17:53 \n     * @Desc: 结束编辑 \n     */\n    disable() {\n        this.isEditing = false\n        // 移除虚拟顶点\n        this.removeFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 14:45:32 \n     * @Desc: 获取真实顶点数组 \n     */\n    getTruePointArr() {\n        return this.pointArr.filter((item) => {\n            return !item.fictitious\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:24:50 \n     * @Desc: 端点数量 \n     */\n    getPointLength() {\n        return this.getTruePointArr().length\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:54:50 \n     * @Desc: 添加端点 \n     */\n    pushPoint(x, y) {\n        if (!this.isEditing || this.isClosePath) {\n            return\n        }\n        this.pointArr.push({\n            x,\n            y\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-11-05 10:41:36 \n     * @Desc: 删除某个顶点 \n     */\n    removePoint(index) {\n        // 点击的是虚拟节点直接返回\n        if (this.pointArr[index].fictitious) {\n            return\n        }\n        this.pointArr.splice(index, 1)\n        // 删除后需要重新创建虚拟节点\n        this.removeFictitiousPoints()\n        this.insertFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-22 09:32:47 \n     * @Desc: 始终闭合模式下的当前鼠标移动到的非固定点 \n     */\n    areaToPoint(x, y) {\n        this.areaToPointPos = {\n            x,\n            y\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:57:47 \n     * @Desc: 渲染 \n     */\n    render() {\n        // 填充区域\n        if (this.isClosePath || this.area) {\n            this.renderArea()\n        }\n        // 绘制线段\n        if (this.opt.lineType === 'custom') {\n            this.opt.customRenderLine && this.opt.customRenderLine(this)\n        } else if (this.opt.lineType === 'borderLine') {\n            this.renderLines(this.strokeStyle)\n            this.renderLines({\n                ...this.strokeStyle,\n                lineWidth: this.strokeStyle.frontLineWidth,\n                strokeColor: this.strokeStyle.frontStrokeColor,\n                lineJoin: this.strokeStyle.frontLineJoin\n            })\n        } else {\n            this.renderLines(this.strokeStyle)\n        }\n        // 绘制端点\n        this.renderPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 17:04:16 \n     * @Desc:  填充区域\n     */\n    renderArea() {\n        this.ctx.save()\n        this.ctx.fillStyle = this.fillColor\n        this.ctx.beginPath()\n        let _pointArr = this.pointArr.concat(this.area ? this.areaToPointPos ? [this.areaToPointPos] : [] : [])\n        for (let i = 0; i < _pointArr.length; i++) {\n            let x = _pointArr[i].x\n            let y = _pointArr[i].y\n            if (i === 0) {\n                this.ctx.moveTo(x, y)\n            } else {\n                this.ctx.lineTo(x, y)\n            }\n        }\n        this.ctx.closePath()\n        this.ctx.fill()\n        this.ctx.restore()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:16:37 \n     * @Desc: 绘制线段 \n     */\n    renderLines({\n        lineWidth,\n        strokeColor,\n        lineJoin,\n        dashOffset\n    }, onlyPath) {\n        this.ctx.save()\n        this.ctx.lineWidth = lineWidth\n        this.ctx.strokeStyle = strokeColor\n        this.ctx.lineJoin = lineJoin\n        this.ctx.beginPath()\n        this.opt.isDash ? this.ctx.setLineDash(dashOffset) : utils.noop()\n        let _pointArr = this.pointArr.concat(this.area ? this.areaToPointPos ? [this.areaToPointPos] : [] : [])\n        for (let i = 0; i < _pointArr.length; i++) {\n            let x = _pointArr[i].x\n            let y = _pointArr[i].y\n            if (i === 0) {\n                this.ctx.moveTo(x, y)\n            } else {\n                this.ctx.lineTo(x, y)\n            }\n        }\n        // 闭合路径\n        if (this.isClosePath || this.area) {\n            this.ctx.closePath()\n        }\n        // 不实际绘制出来\n        if (!onlyPath) {\n            this.ctx.stroke()\n        }\n        this.ctx.restore()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 17:54:18 \n     * @Desc:  绘制端点\n     */\n    renderPoints(onlyPath, callback) {\n        for (let i = 0; i < this.pointArr.length; i++) {\n            this.ctx.beginPath()\n            let x = this.pointArr[i].x\n            let y = this.pointArr[i].y\n            if (this.isEditing || onlyPath || this.hoverActive) {\n                this.drawPoint(x, y, onlyPath, false, this.pointArr[i].fictitious)\n                callback && callback(i)\n            }\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 10:48:01 \n     * @Desc: 插入虚拟节点 \n     */\n    insertFictitiousPoints() {\n        if (!this.isEditing || !this.isClosePath || !this.enableAddPoint) {\n            return\n        }\n        // 先去掉虚拟节点\n        this.removeFictitiousPoints()\n\n        let points = []\n        let arr = this.pointArr\n        let len = arr.length\n        for (let i = 0; i < len - 1; i++) {\n            let s = arr[i]\n            let e = arr[i + 1]\n            points.push({\n                x: (s.x + e.x) / 2,\n                y: (s.y + e.y) / 2,\n                fictitious: true\n            })\n        }\n        points.push({\n            x: (arr[len - 1].x + arr[0].x) / 2,\n            y: (arr[len - 1].y + arr[0].y) / 2,\n            fictitious: true\n        })\n        \n        // 插入\n        let newArr = []\n        for (let i = 0; i < this.pointArr.length; i++) {\n            newArr.push(this.pointArr[i])\n            newArr.push(points.shift())\n        }\n\n        this.pointArr = newArr\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 14:07:12 \n     * @Desc:  去掉虚拟节点\n     */\n    removeFictitiousPoints() {\n        this.pointArr = this.getTruePointArr()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 17:57:19 \n     * @Desc: 绘制点 \n     */\n    drawPoint(x, y, onlyPath, beginPath, reverse) {\n        let {\n            customRenderPoint,\n            showPoint,\n            pointType,\n            pointWidth\n        } = this.opt\n        if (beginPath) {\n            this.ctx.beginPath()\n        }\n        // 用户自定义绘制端点方法\n        if (customRenderPoint) {\n            customRenderPoint(this.ctx, x, y, onlyPath, this.pointStyle)\n        } else { // 预定义绘制端点方法\n            this.ctx.save()\n            this.ctx.lineWidth = this.pointStyle.lineWidth\n            this.ctx.strokeStyle = this.pointStyle.strokeColor\n            this.ctx.fillStyle = this.pointStyle.fillColor\n            // 反向样式，边框和填充的颜色互换，用于虚拟节点的显示\n            if (reverse) {\n                this.ctx.strokeStyle = this.pointStyle.fillColor\n                this.ctx.fillStyle = this.pointStyle.strokeColor\n            }\n            switch (pointType) {\n                case 'square':\n                    this.ctx.rect(x - pointWidth, y - pointWidth, pointWidth * 2, pointWidth * 2)\n                    break;\n                case 'circle':\n                    this.ctx.arc(x, y, pointWidth * 2, 0, 2 * Math.PI)\n                    break;\n                default:\n                    break;\n            }\n            // 不实际绘制出来\n            if (!onlyPath) {\n                if (showPoint) {\n                    this.ctx.fill()\n                    this.ctx.stroke()\n                }\n            }\n            this.ctx.restore()\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:14:29 \n     * @Desc: 检测某个点是否在该路径内 \n     */\n    checkInPath(x, y) {\n        this.renderLines(this.strokeStyle, true)\n        return this.ctx.isPointInPath(x, y)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:48:51 \n     * @Desc: 判断某个点是否在某个端点内 \n     */\n    checkInPoints(x, y) {\n        let index = -1\n        this.renderPoints(true, (i) => {\n            if (this.ctx.isPointInPath(x, y)) {\n                index = i\n            }\n        })\n        return index\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:23:34 \n     * @Desc: 闭合路径 \n     */\n    closePath() {\n        this.areaToPointPos = null\n        this.isClosePath = true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 16:54:34 \n     * @Desc: 允许拖动\n     */\n    enableDrag(pointIndex = -1) {\n        this.isDragging = true\n        this.dragPointIndex = pointIndex\n        this.dragCachePointArr = JSON.parse(JSON.stringify(this.pointArr))\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-25 14:25:32 \n     * @Desc: 获取某个顶点在没有虚拟顶点的情况下的真实索引 \n     */\n    getTruePointIndex(index) {\n        if (index === -1 || this.pointArr[index].fictitious) {\n            return index\n        }\n        let count = 0\n        for (let i = 0; i < index; i++) {\n            if (this.pointArr[i].fictitious) {\n                count++\n            }\n        }\n        return index - count\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 18:33:02 \n     * @Desc: 停止拖动 \n     */\n    disableDrag() {\n        this.isDragging = false\n        this.dragPointIndex = -1\n        this.dragCachePointArr = []\n        // 拖动结束后恢复虚拟节点的创建\n        this.insertFictitiousPoints()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 17:04:23 \n     * @Desc: 拖动某个端点\n     */\n    dragPoint(x, y) {\n        if (!this.isDragging || this.dragPointIndex === -1) {\n            return\n        }\n        // 拖动的是虚拟点，则转换成真实点\n        if (this.pointArr[this.dragPointIndex].fictitious) {\n            delete this.pointArr[this.dragPointIndex].fictitious\n        }\n        // 获取某个顶点的真实索引\n        this.dragPointIndex = this.getTruePointIndex(this.dragPointIndex)\n        // 拖动时隐藏虚拟节点\n        this.removeFictitiousPoints()\n        if (this.updatePointFn) {\n            this.updatePointFn(this, x, y)\n        } else {\n            this.pointArr.splice(this.dragPointIndex, 1, {\n                ...this.pointArr[this.dragPointIndex],\n                x,\n                y\n            })\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 17:04:32 \n     * @Desc: 拖动整体 \n     */\n    dragAll(ox, oy) {\n        if (!this.isDragging) {\n            return\n        }\n        this.pointArr = this.dragCachePointArr.map((item) => {\n            return {\n                ...item,\n                x: item.x + ox,\n                y: item.y + oy\n            }\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 19:13:34 \n     * @Desc: 显示鼠标滑过时可选择状态\n     */\n    enableHoverActive() {\n        this.hoverActive = true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 19:14:02 \n     * @Desc: 关闭鼠标滑过时可选择状态\n     */\n    disableHoverActive() {\n        this.hoverActive = false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:23:44 \n     * @Desc: 遍历检查线段是否存在交叉情况 \n     */\n    checkLineSegmentCross() {\n        if (!this.checkCrossPrevCheck()) {\n            return false\n        }\n        // 已存在的线段\n        let lineSegments = this.createLineSegments(true)\n        let len = lineSegments.length\n        let cross = false\n        for (let i = 0; i < len; i++) {\n            let item = lineSegments[i]\n            if (this.checkCrossWithLineSegments(item[0], item[1], true)) {\n                cross = true\n            }\n        }\n        return cross\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-22 09:36:33 \n     * @Desc: 检查即将形成的线段是否会存在交叉 \n     */\n    checkNextLineSegmentCross(x, y) {\n        if (!this.checkCrossPrevCheck()) {\n            return false\n        }\n        let arr = this.getTruePointArr()\n        let len = arr.length\n        // 即将形成的线段\n        let c = {\n            x,\n            y\n        }\n        let d = arr[len - 1]\n        return this.checkCrossWithLineSegments(c, d)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-22 09:37:07 \n     * @Desc: 检查最后的闭合线段是否会存在交叉 \n     */\n    checkEndLineSegmentCross() {\n        if (!this.checkCrossPrevCheck()) {\n            return false\n        }\n        let arr = this.getTruePointArr()\n        let len = arr.length\n        let c = arr[len - 1]\n        let d = arr[0]\n        return this.checkCrossWithLineSegments(c, d)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:27:00 \n     * @Desc: 判断某条线段是否会与当前存在的线段交叉 \n     */\n    checkCrossWithLineSegments(c, d, close) {\n        // 已存在的线段\n        let lineSegments = this.createLineSegments(close)\n        let cross = false\n        for (let i = 0; i < lineSegments.length; i++) {\n            let item = lineSegments[i]\n            let a = item[0]\n            let b = item[1]\n            if (utils.checkLineSegmentCross(a, b, c, d)) {\n                cross = true\n            }\n        }\n        return cross\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:24:28 \n     * @Desc: 创建已存在点位组成的线段 \n     */\n    createLineSegments(close) {\n        let arr = this.getTruePointArr()\n        let len = arr.length\n        // 已存在的线段\n        let lineSegments = []\n        for (let i = 0; i < len - 1; i++) {\n            lineSegments.push([\n                arr[i],\n                arr[i + 1]\n            ])\n        }\n        // 包含起点和终点组成的线段\n        if (close) {\n            lineSegments.push([\n                arr[len - 1],\n                arr[0]\n            ])\n        }\n        return lineSegments\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 20:23:59 \n     * @Desc: 三个端点以下不可能交叉 \n     */\n    checkCrossPrevCheck() {\n        let len = this.getTruePointArr().length\n        // 三个端点以下不可能交叉\n        if (len <= 2) {\n            return false\n        }\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-22 10:37:07 \n     * @Desc: 获取距离某个点最近的线段 \n     */\n    getPintNearestLine(x, y) {\n        let lineSegments = this.createLineSegments(this.isClosePath)\n        if (lineSegments.length <= 0) {\n            return null\n        }\n        if (this.dragPointIndex !== -1) {\n            if (this.dragPointIndex === 0) {\n                lineSegments.splice(0, 1)\n                lineSegments.splice(-1, 1)\n            } else {\n                lineSegments.splice(this.dragPointIndex - 1, 2)\n            }\n        }\n        let minNum = Infinity\n        let minLine\n        for (let i = 0; i < lineSegments.length; i++) {\n            let item = lineSegments[i]\n            let a = item[0]\n            let b = item[1]\n            let d = utils.getLinePointDistance(a.x, a.y, b.x, b.y, x, y)\n            if (d < minNum) {\n                minNum = d\n                minLine = item\n            }\n        }\n        return [minNum, minLine]\n    }\n}","import MarkItem from '../markItem'\n\n/*\n配置\n{\n    value: [\n        {\n            data: null,//附加数据\n            pointArr: [{// 点位数据\n                {\"x\":0,\"y\":0}\n            }],\n            strokeStyle: {},\n            fillColor: '',\n            pointStyle:{}\n        }\n    ],// 回显的标注区域数据\n    fillColor: String, // 标注区域填充颜色\n    strokeStyle: { // 标注轮廓样式\n        lineWidth: 3, // 线条宽度\n        strokeColor: 'rgba(0, 136, 255, 1)', // 线条颜色\n        lineJoin: 'round' // 线条末端样式\n    },\n    pointStyle: {// 端点的样式\n        lineWidth: 3,\n        strokeColor: 'rgba(0, 136, 255, 1)',\n        fillColor: 'rgba(0, 136, 255, 0.5)'\n    },\n    showPoint: true,// 是否绘制端点，默认true\n    pointType: '',// 端点类型，square（正方形）、circle（圆形），默认square\n    pointWidth: 4,// 端点的宽度，正方形的边长的一半、圆形的半径，默认3\n    customRenderPoint(ctx, x, y, onlyPath, pointStyle) {// 自定义绘制端点方法\n        // ctx（canvas绘图上下文）、x,y（中心点的位置）、onlyPath（为true代表用于检测点是否在该端点路径内时调用，此时不应该实际绘制出来，只要绘制路径即可）、pointStyle（端点样式）\n    },\n    max: 3,// 同时最多标注对象数量，默认-1，不限制\n    hoverActive: false,// 鼠标滑过对象时显示可激活状态，默认false\n    readonly: false,// 是否只读，默认false\n    single: false,// 是否编辑某个区域时隐藏其他所有区域，默认false\n    noCrossing: false,// 是否禁止某个标注对象自身线段交叉，和其他标注对象还是可以交叉的\n    dbClickRemovePoint: false,// 是否允许双击顶点删除该顶点\n    area: false,// 区域模式，从始至终都是一个闭合的图形\n    adsorbent: true,// 是否开启吸附效果\n    adsorbentNum: 5,// 吸附的距离，即距离小于等于该值时进行吸附\n    adsorbentLine: true,// 是否允许吸附到线段上\n    dbClickActive: false,// 是否双击激活标注对象，默认为单击激活\n    singleClickComplete: true,// 默认情况下，双击结束编辑，如果该值设为true，除了新增创建期间外的编辑下如果单击了其他区域也可以结束编辑，设为false，即只允许双击结束编辑\n    enableAddPoint: false,// 是否允许新增节点，仅在闭合情况下的编辑期间\n}\n\n属性\n\n事件\nCURRENT-MARK-ITEM-CHANGE（当前激活标注对象变化）\nHOVER-ITEM（鼠标移到某个标注对象区域内）\nCOMPLETE-EDIT-ITEM（双击完成绘制）\nIS-CREATE-MARKING-CHANGE（当前是否在创建中状态变化）\n\n方法\n\n插件开发\n插件需要返回一个promise，resolve之后才会加载下一个插件，所以插件的use顺序十分重要\n*/\n\n// 默认配置\nconst defaultOpt = {\n    value: [],\n    max: -1,\n    hoverActive: false,\n    readonly: false,\n    single: false,\n    noCrossing: false,\n    dbClickRemovePoint: false,\n    area: false,\n    adsorbent: true,\n    adsorbentNum: 5,\n    adsorbentLine: true,\n    dbClickActive: false,\n    singleClickComplete: true,\n    enableAddPoint: false\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-10-15 10:25:23 \n * @Desc: 编辑插件\n */\nexport default function EditPlugin(instance, utils) {\n    let _resolve = null\n    let promise = new Promise((resolve) => {\n        _resolve = resolve\n    })\n    let opt = {\n        ...defaultOpt,\n        ...instance.opt\n    }\n    // 修改鼠标插件的默认配置\n    if (opt.dbClickActive) {\n        if (instance.opt.cursorTips) {\n            if (!instance.opt.cursorTips.HOVER) {\n                instance.opt.cursorTips.HOVER = '双击激活该区域并进入编辑状态'\n            }\n        } else {\n            instance.opt.cursorTips = {\n                HOVER: '双击激活该区域并进入编辑状态'\n            }\n        }\n    }\n    // 全部的标注对象列表\n    let markItemList = []\n    // 当前编辑中的标注对象\n    let curEditingMarkItem = null\n    // 拖动整体时的起始位置\n    let dragStartPos = {\n        x: 0,\n        y: 0\n    }\n    // 缓存一份拖动整体时的起始位置\n    let dragStartPosCache = {\n        x: 0,\n        y: 0\n    }\n    // 编辑中\n    let isReadonly = opt.readonly\n    // 是否新增标注中，不包括闭合后的编辑\n    let isCreateMarking = false\n    // 创建新标注时的配置项\n    let createMarkItemOpt = null\n    // 缓存点位数据\n    let cachePointArr = null\n    // 标注对象递增id\n    let mId = 0\n    // 当前的吸附值，用来在修正点击事件要新增的顶点的坐标值\n    let adsorbentedPos = null\n    // 吸附整体时的偏移量\n    let adsorbentedWholePos = [0, 0]\n    // 用来控制整体吸附后的脱离\n    let adsorbentedWholePosCacheMousePos = {x: 0, y: 0}\n    // 刚才是否处于拖动中，用来修复click事件比mouseup事件慢的问题\n    let lastIsDragging = false\n    // 创建一个只用于渲染吸附时的顶点的标注对象\n    let adsorbentMark = createNewMarkItem()\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 15:54:21 \n     * @Desc: 回显数据 \n     */\n    function reShow() {\n        if (opt.value.length > 0) {\n            opt.value.forEach((item) => {\n                let _markItem = new MarkItem(instance.ctx, {\n                    id: mId++,\n                    ...opt,\n                    ...item,\n                    pointArr: item.pointArr.map((point) => {\n                        return {\n                            x: point.x * instance.canvasEleRectInfo.width,\n                            y: point.y * instance.canvasEleRectInfo.height\n                        }\n                    }),\n                })\n                _markItem.closePath()\n                markItemList.push(_markItem)\n            })\n            render()\n        }\n    }\n    reShow()\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 15:34:49 \n     * @Desc: 获取所有变量的值 \n     */\n    function getState() {\n        return {\n            markItemList,\n            curEditingMarkItem,\n            isReadonly,\n            isCreateMarking\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 16:46:38 \n     * @Desc: 创建新标注对象实例 \n     */\n    function createNewMarkItem(plusOpt = {}) {\n        return new MarkItem(instance.ctx, {\n            id: mId++,\n            ...opt,\n            ...createMarkItemOpt,\n            ...plusOpt,\n            area: opt.area\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:56:19 \n     * @Desc: 绘制 \n     */\n    function render() {\n        instance.clearCanvas()\n        if (opt.single && (curEditingMarkItem || isCreateMarking)) {\n            curEditingMarkItem && curEditingMarkItem.render()\n        } else {\n            markItemList.forEach((item) => {\n                item.render()\n            })\n        }\n        // 渲染吸附提示点\n        if (adsorbentedPos) {\n            adsorbentMark.drawPoint(adsorbentedPos[0], adsorbentedPos[1], false, true)\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:25:19 \n     * @Desc: 清除对象的编辑状态\n     */\n    function disableAllItemsEdit() {\n        markItemList.forEach((item) => {\n            item.disable()\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 19:14:36 \n     * @Desc: 清除对象鼠标滑过显示可选择状态 \n     */\n    function disableAllItemsHoverActive() {\n        markItemList.forEach((item) => {\n            item.disableHoverActive()\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:07:31 \n     * @Desc: 检查包含某个点的标注对象 \n     *  从后往前遍历是因为后面绘制的层级更高\n     */\n    function checkInPathItem(x, y) {\n        for (let i = markItemList.length - 1; i >= 0; i--) {\n            let item = markItemList[i]\n            if (item.checkInPath(x, y) || item.checkInPoints(x, y) !== -1) {\n                return item\n            }\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-11-02 17:48:18 \n     * @Desc: 找出所有包含该点的标注对象 \n     */\n    function checkInPathAllItems(x, y) {\n        let items = []\n        for (let i = markItemList.length - 1; i >= 0; i--) {\n            let item = markItemList[i]\n            if (item.checkInPath(x, y) || item.checkInPoints(x, y) !== -1) {\n                items.push(item) \n            }\n        }\n        return items\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 20:00:59 \n     * @Desc: 获取标注点位数据 \n     */\n    function getMarkData() {\n        return markItemList.map((item) => {\n            let pointArr = item.pointArr.map((point) => {\n                return {\n                    x: point.x / instance.canvasEleRectInfo.width,\n                    y: point.y / instance.canvasEleRectInfo.height\n                }\n            })\n            return {\n                data: item.data,\n                pointArr\n            }\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 11:29:16 \n     * @Desc: 当前是否正在创建新标注中，即当前标注还未闭合 \n     */\n    function getIsCreateIngMarkItem () {\n        return curEditingMarkItem && !curEditingMarkItem.isClosePath\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:41:24 \n     * @Desc: 开启编辑模式 \n     */\n    function enableEdit () {\n        isReadonly = false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 14:58:24 \n     * @Desc: 清除所有状态 \n     */\n    function reset() {\n        disableAllItemsHoverActive()\n        disableAllItemsEdit()\n        setMarkEditItem(null)\n        render()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:41:40 \n     * @Desc: 开启只读模式，返回false代表当前有正在编辑中的对象，不能结束编辑\n     */\n    function disableEdit () {\n        if (getIsCreateIngMarkItem()) {\n            return false\n        }\n        reset()\n        isReadonly = true\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:49:13 \n     * @Desc: 设置当前创建状态\n     */\n    function setIsCreateMarking (state) {\n        if (isReadonly) {\n            return false\n        }\n        isCreateMarking = state\n        instance.observer.publish('IS-CREATE-MARKING-CHANGE', state)\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 11:03:49 \n     * @Desc: 创建新标注，返回false代表不能创建新标注\n     * _opt：配置项，可添加MarkItem的所有配置项\n     */\n    function createMarkItem(_opt = null) {\n        if (getIsCreateIngMarkItem() || isReadonly) {\n            return false\n        }\n        reset()\n        createMarkItemOpt = _opt\n        setIsCreateMarking(true)\n        if (opt.single) {\n            instance.clearCanvas()\n        }\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-21 18:58:23 \n     * @Desc: 取消/退出创建\n     * single为true的情况下编辑某个区域想要退出时可以调用reset方法\n     */\n    function exitCreate() {\n        if (!isCreateMarking) {\n            return false\n        } \n        setIsCreateMarking(false)\n        if (getIsCreateIngMarkItem()) {\n            let index = markItemList.findIndex((item) => {\n                return item === curEditingMarkItem\n            })\n            markItemList.splice(index, 1)\n        }\n        reset()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:49:13 \n     * @Desc: 设置当前激活标注对象 \n     */\n    function setMarkEditItem (item) {\n        if (isReadonly) {\n            return false\n        }\n        curEditingMarkItem = item\n        instance.observer.publish('CURRENT-MARK-ITEM-CHANGE', item)\n        return true\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 10:31:25 \n     * @Desc: 删除指定标注对象 \n     */\n    function deleteMarkItem (item) {\n        if (!item) {\n            return false\n        }\n        let index = markItemList.findIndex((i) => {\n            return i === item\n        })\n        if (index !== -1) {\n            if (curEditingMarkItem === item) {\n                setMarkEditItem(null)\n            }\n            let deleteItem = markItemList.splice(index, 1)\n            render()\n            instance.observer.publish('DELETE-MARKING-ITEM', deleteItem[0], index)\n            return true\n        }\n        return false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 10:31:33 \n     * @Desc: 删除所有标注对象 \n     */\n    function deleteAllMarkItem () {\n        markItemList = []\n        setMarkEditItem(null)\n        render()\n        instance.observer.publish('DELETE-ALL-MARKING-ITEM')\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-22 09:50:40 \n     * @Desc: 吸附效果 \n     */\n    function checkAdsorbent(x, y) {\n        if (!opt.adsorbent) {\n            return [x, y]\n        }\n        let min = Infinity\n        let _x = x, _y = y\n        let _adsorbentedPos = null\n        markItemList.forEach((item) => {\n            // 端点\n            item.pointArr.forEach((point, index) => {\n                // 跳过自己和自己的比较\n                if (curEditingMarkItem && item === curEditingMarkItem && item.dragPointIndex === index) {\n                    return\n                }\n                let d = utils.getTwoPointDistance(point.x, point.y, x, y)\n                if (d <= opt.adsorbentNum && d < min) {\n                    min = d\n                    _x = point.x\n                    _y = point.y\n                    _adsorbentedPos = [_x, _y]\n                }\n            })\n            // 线段\n            if (opt.adsorbentLine) {\n                let nearestLine = item.getPintNearestLine(x, y)\n                if (nearestLine && nearestLine[0] <= opt.adsorbentNum) {\n                    let points = nearestLine[1]\n                    let pointA = points[0]\n                    let pointB = points[1]\n                    let minx = Math.min(pointA.x, pointB.x)\n                    let maxx = Math.max(pointA.x, pointB.x)\n                    if (x >= minx && x <= maxx) {\n                        let nearestPoint = utils.getNearestPointFromLine(pointA.x, pointA.y, pointB.x, pointB.y, x, y)\n                        _x = nearestPoint[0]\n                        _y = nearestPoint[1]\n                        _adsorbentedPos = [_x, _y]\n                    }\n                }\n            }\n        })\n        adsorbentedPos = _adsorbentedPos\n        return [_x, _y]\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-01-23 11:11:01 \n     * @Desc: 吸附整体 \n     */\n    function checkAdsorbentWhole(x, y) {\n        if (!opt.adsorbent) {\n            return [x, y]\n        }\n        let min = Infinity\n        let minPoint = null\n        let minPoint2 = null\n        // 遍历当前图形和其他图形最近的两个顶点\n        curEditingMarkItem.pointArr.forEach((pointItem) => {\n            markItemList.forEach((markItem) => {\n                if (markItem !== curEditingMarkItem) {\n                    markItem.pointArr.forEach((markItemPointItem) =>{\n                        let d = utils.getTwoPointDistance(pointItem.x, pointItem.y, markItemPointItem.x, markItemPointItem.y)\n                        if (d < min) {\n                            min = d\n                            minPoint = pointItem\n                            minPoint2 = markItemPointItem\n                        }\n                    })\n                }\n            })\n        })\n        if (min <= opt.adsorbentNum) {\n            adsorbentedWholePos = [minPoint2.x - minPoint.x, minPoint2.y - minPoint.y]\n            dragStartPos.x -= adsorbentedWholePos[0]\n            dragStartPos.y -= adsorbentedWholePos[1]\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:12:55 \n     * @Desc: 监听单击事件 \n     */\n    instance.on('CLICK', (e) => {\n        if (isReadonly) {\n            return\n        }\n        if (lastIsDragging) {\n            lastIsDragging = false\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        // 检查点击的位置是否存在标注对象\n        let inPathItem = null\n         // 创建新对象\n        if (isCreateMarking) {\n            let _x = x\n            let _y = y\n            // 如果存在吸附数据则使用吸附数据\n            if (adsorbentedPos) {\n                _x = adsorbentedPos[0]\n                _y = adsorbentedPos[1]\n                adsorbentedPos = null\n            }\n            // 当前存在尚未闭合的激活对象\n            if (curEditingMarkItem) {\n                // 检查线段是否交叉\n                if (opt.noCrossing) {\n                    let cross = curEditingMarkItem.checkNextLineSegmentCross(_x, _y)\n                    if (cross) {\n                        instance.observer.publish('LINE-CROSS', curEditingMarkItem)\n                    } else {\n                        curEditingMarkItem.pushPoint(_x, _y)\n                    }\n                } else {\n                    curEditingMarkItem.pushPoint(_x, _y)\n                }\n            } else {// 当前没有这种标注中的对象\n                // 数量判断\n                if (opt.max === -1 || markItemList.length < opt.max) {\n                    disableAllItemsEdit()\n                    setMarkEditItem(createNewMarkItem())\n                    curEditingMarkItem.enable()\n                    curEditingMarkItem.pushPoint(_x, _y)\n                    markItemList.push(curEditingMarkItem)\n                } else { // 超出数量限制\n                    instance.observer.publish('COUNT-LIMIT', curEditingMarkItem)\n                    setIsCreateMarking(false)\n                }\n            }\n        } else if (inPathItem = checkInPathItem(x, y)) { // 当前点击的位置存在标注对象\n            // !(opt.single && curEditingMarkItem) && \n            if (!opt.dbClickActive && !checkInPathAllItems(x, y).includes(curEditingMarkItem)) {\n                if (!opt.single || (opt.single && !curEditingMarkItem)) {\n                    disableAllItemsEdit()\n                    inPathItem.enable()\n                    setMarkEditItem(inPathItem)\n                }\n            }\n        } else {// 点击空白处清除当前所有状态\n            if (!opt.single && opt.singleClickComplete) {\n                reset()\n            }\n        }\n        render()\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:14:57 \n     * @Desc: 监听双击事件 \n     */\n    instance.on('DOUBLE-CLICK', (e) => {\n        if (isReadonly) {\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        // 能否激活其他对象\n        let canActive = true\n        // 检查当前双击的位置最上层的编辑对象\n        let inPathItem = checkInPathItem(x, y)\n        // 检查当前双击的对象是否和当前编辑中的对象是同一个\n        let isSame = inPathItem && curEditingMarkItem ? inPathItem === curEditingMarkItem : false\n        // 当前存在编辑中的对象\n        if (curEditingMarkItem) {\n            // 点击的是顶点\n            let inPointIndex = curEditingMarkItem.checkInPoints(x, y)\n            if (opt.dbClickRemovePoint && inPointIndex !== -1) {\n                canActive = false\n                if (curEditingMarkItem.getPointLength() > 3) {\n                    curEditingMarkItem.removePoint(inPointIndex)\n                    render()\n                } else {\n                    instance.observer.publish('NOT-ENOUGH-POINTS-REMOVE', curEditingMarkItem)\n                }\n            } else {\n                // 端点数量不足三个\n                if (curEditingMarkItem.getPointLength() < 3) {\n                    canActive = false\n                    instance.observer.publish('NOT-ENOUGH-END-POINTS', curEditingMarkItem)\n                } else if (opt.noCrossing && curEditingMarkItem.checkEndLineSegmentCross()) {// 线段存在交叉\n                    canActive = false\n                    instance.observer.publish('LINE-CROSS', curEditingMarkItem)\n                } else {\n                    if (isCreateMarking) {\n                        instance.observer.publish('COMPLETE-CREATE-ITEM', curEditingMarkItem, e)\n                    }\n                    setIsCreateMarking(false)\n                    curEditingMarkItem.closePath()\n                    curEditingMarkItem.disable()\n                    adsorbentedPos = null\n                    setMarkEditItem(null)\n                    render()\n                    instance.observer.publish('COMPLETE-EDIT-ITEM', curEditingMarkItem, e)\n                }\n            }\n        }\n        // 双击激活标注对象\n        if (opt.dbClickActive && !isCreateMarking && canActive && inPathItem && !isSame) {\n            disableAllItemsEdit()\n            inPathItem.enable()\n            setMarkEditItem(inPathItem)\n            render()\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 15:43:14 \n     * @Desc: 监听鼠标按下事件 \n     */\n    instance.on('MOUSEDOWN', (e) => {\n        if (isReadonly) {\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        if (!curEditingMarkItem || !curEditingMarkItem.isEditing || !curEditingMarkItem.isClosePath) {\n            return\n        }\n        // 判断是否在端点内\n        let inPointIndex = curEditingMarkItem.checkInPoints(x, y)\n        // 是否在路径内\n        let isInPath = curEditingMarkItem.checkInPath(x, y)\n        if (isInPath || inPointIndex !== -1) {\n            if (opt.noCrossing) {\n                cachePointArr = JSON.parse(JSON.stringify(curEditingMarkItem.pointArr))\n            }\n            dragStartPos.x = x\n            dragStartPos.y = y\n            dragStartPosCache.x = x\n            dragStartPosCache.y = y\n            curEditingMarkItem.enableDrag(inPointIndex)\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 16:57:32 \n     * @Desc: 监听鼠标移动事件 \n     */\n    instance.on('MOUSEMOVE', (e) => {\n        if (isReadonly) {\n            return\n        }\n        let {\n            x,\n            y\n        } = instance.toCanvasPos(e)\n        // 拖动编辑\n        if (curEditingMarkItem && curEditingMarkItem.isDragging) {\n            if (curEditingMarkItem.dragPointIndex !== -1) {// 拖动单个顶点\n                curEditingMarkItem.dragPoint(...checkAdsorbent(x, y))\n            } else {// 拖动整体图形\n                checkAdsorbentWhole()\n                // 控制吸附后的脱离\n                if (adsorbentedWholePos[0] !== 0 && adsorbentedWholePos[1] !== 0 && adsorbentedWholePosCacheMousePos.x === 0 && adsorbentedWholePosCacheMousePos.y === 0) {\n                    adsorbentedWholePosCacheMousePos.x = x\n                    adsorbentedWholePosCacheMousePos.y = y\n                }\n                if (adsorbentedWholePosCacheMousePos.x !== 0 && adsorbentedWholePosCacheMousePos.y !== 0) {\n                    if (utils.getTwoPointDistance(adsorbentedWholePosCacheMousePos.x, adsorbentedWholePosCacheMousePos.y, x, y) > opt.adsorbentNum) {\n                        adsorbentedWholePos = [0, 0]\n                        dragStartPos.x = dragStartPosCache.x\n                        dragStartPos.y = dragStartPosCache.y\n                        adsorbentedWholePosCacheMousePos.x = 0\n                        adsorbentedWholePosCacheMousePos.y = 0\n                    }\n                }\n                let ox = x - dragStartPos.x\n                let oy = y - dragStartPos.y\n                curEditingMarkItem.dragAll(ox, oy)\n            }\n            render()\n            let inPointIndex = curEditingMarkItem.checkInPoints(x, y)\n            instance.observer.publish('HOVER-ITEM', curEditingMarkItem, curEditingMarkItem, checkInPathAllItems(x, y), e, inPointIndex)\n        } else if(isCreateMarking) {// 创建新标注中\n            let ox = x - dragStartPos.x\n            let oy = y - dragStartPos.y\n            let apos = checkAdsorbent(ox, oy)\n            // 始终闭合模式\n            if (opt.area && curEditingMarkItem) {\n                curEditingMarkItem.areaToPoint(...apos)\n            }\n            render()\n        } else if(!isCreateMarking){// 显示可选择状态\n            let inPathItem = checkInPathItem(x, y)\n            // 鼠标滑过显示可选择状态\n            if (opt.hoverActive && (!curEditingMarkItem || curEditingMarkItem.isClosePath)) {\n                disableAllItemsHoverActive()\n                inPathItem && inPathItem.enableHoverActive()\n                render()\n            }\n            if (inPathItem && inPathItem.isClosePath) {\n                let inPointIndex = inPathItem.checkInPoints(x, y)\n                instance.observer.publish('HOVER-ITEM', inPathItem, curEditingMarkItem, checkInPathAllItems(x, y), e, inPointIndex)\n            }\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 18:31:56 \n     * @Desc: 监听鼠标松开事件 \n     */\n    instance.on('MOUSEUP', (e) => {\n        if (isReadonly) {\n            return\n        }\n        if (curEditingMarkItem && curEditingMarkItem.isDragging) {\n            lastIsDragging = true\n            curEditingMarkItem.disableDrag()\n            dragStartPos.x = 0\n            dragStartPos.y = 0\n            dragStartPosCache.x = 0\n            dragStartPosCache.y = 0\n            if (opt.noCrossing && curEditingMarkItem.checkLineSegmentCross()) {\n                instance.observer.publish('LINE-CROSS', curEditingMarkItem)\n                curEditingMarkItem.pointArr = cachePointArr\n                cachePointArr = null\n            }\n            render()\n        }\n    })\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-16 09:42:10 \n     * @Desc: 暴露方法给实例引用 \n     */\n    instance._disableAllItemsEdit = disableAllItemsEdit\n    instance._setMarkEditItem = setMarkEditItem\n    instance._createNewMarkItem = createNewMarkItem\n    instance._setIsCreateMarking = setIsCreateMarking\n    instance._render = render\n    instance._disableAllItemsHoverActive = disableAllItemsHoverActive\n    instance._checkInPathItem = checkInPathItem\n    instance._checkInPathAllItems = checkInPathAllItems\n    instance._getIsCreateIngMarkItem = getIsCreateIngMarkItem\n\n    instance.getState = getState\n    instance.getMarkData = getMarkData\n    instance.enableEdit = enableEdit\n    instance.disableEdit = disableEdit\n    instance.deleteMarkItem = deleteMarkItem\n    instance.deleteAllMarkItem = deleteAllMarkItem\n    instance.createMarkItem = createMarkItem\n    instance.exitCreate = exitCreate\n    instance.reset = reset\n\n    _resolve()\n    return promise\n}","import Observer from './observer'\nimport utils from './utils'\nimport editPlugin from './plugins/edit'\n\n/*\n配置\n{\n    el: Object, // 容器元素，dom元素或选择器字符串\n    dbClickTime: 200,// 双击间隔事件，默认200ms\n}\n\n事件\non(event, callback)，事件监听，CLICK、DOUBLE-CLICK、MOUSEDOWN、MOUSEMOVE、MOUSEUP、MOUSEENTER、MOUSELEAVE、WINDOW-CLICK\n*/\n\n// 默认配置\nconst defaultOpt = {\n    dbClickTime: 200,\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2020-09-27 14:02:06 \n * @Desc: 标注库 \n */\nclass Markjs {\n    static pluginList = []\n\n    \n    static use(plugin, index = -1) {\n        if (!plugin) {\n            return\n        }\n        if (plugin.used) {\n            return this\n        }\n        plugin.used = true\n        if (index === -1) {\n            Markjs.pluginList.push(plugin)\n        } else {\n            Markjs.pluginList.splice(index, 0, plugin)\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:02:12 \n     * @Desc: 构造函数 \n     */\n    constructor(opt = {}) {\n        if (!opt.el) {\n            throw new Error('el属性为空')\n        }\n        // 配置项\n        this.opt = {\n            ...defaultOpt,\n            ...opt\n        }\n        // 容器元素\n        this.el = typeof opt.el === 'string' ? document.querySelector(opt.el) : opt.el\n        if (!this.el) {\n            throw new Error('容器元素获取失败')\n        }\n        // 容器元素的尺寸信息\n        this.elRectInfo = null\n        // canvas元素\n        this.canvasEle = null\n        // 绘图元素尺寸信息\n        this.canvasEleRectInfo = null\n        // 绘图上下文\n        this.ctx = null\n        // 单击定时器\n        this.clickTimer = null\n        // 发布订阅对象\n        this.observer = new Observer()\n        // 鼠标按下的位置\n        this.mousedownPos = {\n            x: 0,\n            y: 0\n        }\n        // 鼠标松开的位置\n        this.mouseupPos = {\n            x: 0,\n            y: 0\n        }\n        // 鼠标上次点击的时间\n        this.lastClickTime = 0\n\n        // 固化事件函数的this\n        this.bindEventCallback()\n        // 初始化\n        this.init()\n        // 注册插件\n        this.usePlugins()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 10:35:33 \n     * @Desc: 注册插件 \n     */\n    usePlugins() {\n        let index = 0\n        let len = Markjs.pluginList.length\n        let loopUse = () => {\n            if (index >= len) {\n                return\n            }\n            let cur = Markjs.pluginList[index]\n            cur(this, utils).then(() => {\n                index++\n                loopUse()\n            })\n        }\n        loopUse()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 13:54:58 \n     * @Desc: 监听事件 \n     */\n    on(event, callback) {\n        return this.observer.subscribe(event, callback)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 13:56:06 \n     * @Desc: 解除监听事件 \n     */\n    off(token) {\n        this.observer.unsubscribe(token)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:06:54 \n     * @Desc: 初始化 \n     */\n    init() {\n        this.createElement()\n        this.ctx = this.canvasEle.getContext('2d')\n        this.bindEvent()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:11:03 \n     * @Desc: 销毁 \n     */\n    destroy() {\n        this.unbindEvent()\n        this.el.removeChild(this.canvasEle)\n        this.observer.publish('DESTORY')\n        this.observer.clearAll()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:26:19 \n     * @Desc: 创建元素 \n     */\n    createElement() {\n        this.elRectInfo = this.el.getBoundingClientRect()\n        let {\n            width,\n            height\n        } = this.elRectInfo\n        this.canvasEle = document.createElement('canvas')\n        this.canvasEle.width = width\n        this.canvasEle.height = height\n        this.canvasEleRectInfo = {\n            width,\n            height\n        }\n        this.el.appendChild(this.canvasEle)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 16:55:53 \n     * @Desc:  固化事件函数的this\n     */\n    bindEventCallback() {\n        this.onclick = this.onclick.bind(this)\n        this.onmousedown = this.onmousedown.bind(this)\n        this.onmousemove = this.onmousemove.bind(this)\n        this.onmouseup = this.onmouseup.bind(this)\n        this.onmouseenter = this.onmouseenter.bind(this)\n        this.onmouseleave = this.onmouseleave.bind(this)\n        this.onWindowClick = this.onWindowClick.bind(this)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:55:12 \n     * @Desc: 绑定事件 \n     */\n    bindEvent() {\n        this.canvasEle.addEventListener('click', this.onclick)\n        this.canvasEle.addEventListener('mousedown', this.onmousedown)\n        this.canvasEle.addEventListener('mousemove', this.onmousemove)\n        window.addEventListener('mouseup', this.onmouseup)\n        this.canvasEle.addEventListener('mouseenter', this.onmouseenter)\n        this.canvasEle.addEventListener('mouseleave', this.onmouseleave)\n        window.addEventListener('click', this.onWindowClick)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 14:57:23 \n     * @Desc: 解绑事件 \n     */\n    unbindEvent() {\n        this.canvasEle.removeEventListener('click', this.onclick)\n        this.canvasEle.removeEventListener('mousedown', this.onmousedown)\n        this.canvasEle.removeEventListener('mousemove', this.onmousemove)\n        window.removeEventListener('mouseup', this.onmouseup)\n        this.canvasEle.removeEventListener('mouseenter', this.onmouseenter)\n        this.canvasEle.removeEventListener('mouseleave', this.onmouseleave)\n        window.removeEventListener('click', this.onWindowClick)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:04:50 \n     * @Desc: 单击事件 \n     */\n    onclick(e) {\n        if (this.clickTimer) {\n            clearTimeout(this.clickTimer)\n            this.clickTimer = null\n        }\n\n        this.clickTimer = setTimeout(() => {\n            this.observer.publish('CLICK', e)\n        }, this.opt.dbClickTime);\n\n        if (Date.now() - this.lastClickTime <= this.opt.dbClickTime) {\n            clearTimeout(this.clickTimer)\n            this.clickTimer = null\n            this.lastClickTime = 0\n            this.observer.publish('DOUBLE-CLICK', e)\n        }\n\n        this.lastClickTime = Date.now()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:02:26 \n     * @Desc: 鼠标按下事件 \n     */\n    onmousedown(e) {\n        this.mousedownPos = {\n            x: e.clientX,\n            y: e.clientY\n        }\n        this.observer.publish('MOUSEDOWN', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:02:26 \n     * @Desc: 鼠标移动事件 \n     */\n    onmousemove(e) {\n        this.observer.publish('MOUSEMOVE', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:02:26 \n     * @Desc: 鼠标松开事件 \n     */\n    onmouseup(e) {\n        this.mouseupPos = {\n            x: e.clientX,\n            y: e.clientY\n        }\n        this.observer.publish('MOUSEUP', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:05:29 \n     * @Desc: 鼠标移入事件 \n     */\n    onmouseenter(e) {\n        this.observer.publish('MOUSEENTER', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:06:28 \n     * @Desc: 鼠标移出事件 \n     */\n    onmouseleave(e) {\n        this.observer.publish('MOUSELEAVE', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-10-15 14:07:31 \n     * @Desc: window的点击事件 \n     */\n    onWindowClick(e) {\n        this.observer.publish('WINDOW-CLICK', e)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 15:56:54 \n     * @Desc: 清除画布 \n     */\n    clearCanvas() {\n        this.ctx.clearRect(0, 0, this.canvasEle.width, this.canvasEle.height)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2020-09-27 16:57:03 \n     * @Desc: 鼠标坐标转为相对canvas的坐标 \n     */\n    toCanvasPos(e) {\n        let cx = e.clientX\n        let cy = e.clientY\n        let {\n            left,\n            top\n        } = this.canvasEle.getBoundingClientRect()\n        let x = cx - left\n        let y = cy - top\n        return {\n            x,\n            y\n        }\n    }\n}\n\nMarkjs.use(editPlugin)\n\nexport default Markjs"],"names":["Observer","observerListeners","observerToken","topic","this","subList","arg","i","length","context","fn","apply","arguments","undefined","push","token","k","hasOwnProperty","j","splice","getLineAllPoint","x1","y1","x2","y2","x","arr","dy","Math","abs","min","A","C","dx","getTwoPointDistance","sqrt","pow","a","b","c","d","cross","ab","y","ac","ad","abac","abad","dc","da","db","src","Promise","resolve","reject","img","Image","onload","onerror","e","getY","B","atan2","PI","Infinity","minPoint","forEach","item","defaultStrokeStyle","defaultFillColor","defaultPointStyle","defaultOpt","MarkItem","ctx","opt","data","strokeStyle","fillColor","pointStyle","pointArr","updatePointFn","updatePoint","isClosePath","isEditing","isDragging","dragPointIndex","dragCachePointArr","hoverActive","area","areaToPointPos","enableAddPoint","insertFictitiousPoints","removeFictitiousPoints","filter","fictitious","getTruePointArr","index","renderArea","lineType","customRenderLine","renderLines","frontLineWidth","frontStrokeColor","frontLineJoin","renderPoints","save","fillStyle","beginPath","_pointArr","concat","moveTo","lineTo","closePath","fill","restore","onlyPath","lineWidth","strokeColor","lineJoin","dashOffset","isDash","setLineDash","utils","noop","stroke","callback","drawPoint","points","len","s","newArr","shift","reverse","customRenderPoint","showPoint","pointType","pointWidth","rect","arc","isPointInPath","_this","pointIndex","JSON","parse","stringify","count","getTruePointIndex","ox","oy","map","checkCrossPrevCheck","lineSegments","createLineSegments","checkCrossWithLineSegments","close","checkLineSegmentCross","minNum","minLine","getLinePointDistance","Markjs","el","Error","document","querySelector","elRectInfo","canvasEle","canvasEleRectInfo","clickTimer","observer","mousedownPos","mouseupPos","lastClickTime","bindEventCallback","init","usePlugins","plugin","used","pluginList","loopUse","then","event","subscribe","unsubscribe","createElement","getContext","bindEvent","unbindEvent","removeChild","publish","clearAll","getBoundingClientRect","width","height","appendChild","onclick","bind","onmousedown","onmousemove","onmouseup","onmouseenter","onmouseleave","onWindowClick","addEventListener","removeEventListener","setTimeout","dbClickTime","Date","now","clientX","clientY","clearRect","cx","cy","left","top","use","instance","_resolve","promise","dbClickActive","cursorTips","HOVER","markItemList","curEditingMarkItem","dragStartPos","dragStartPosCache","isReadonly","readonly","isCreateMarking","createMarkItemOpt","cachePointArr","mId","adsorbentedPos","adsorbentedWholePos","adsorbentedWholePosCacheMousePos","lastIsDragging","adsorbentMark","createNewMarkItem","plusOpt","render","clearCanvas","single","disableAllItemsEdit","disable","disableAllItemsHoverActive","disableHoverActive","checkInPathItem","checkInPath","checkInPoints","checkInPathAllItems","items","getIsCreateIngMarkItem","reset","setIsCreateMarking","state","setMarkEditItem","checkAdsorbent","adsorbent","_x","_y","_adsorbentedPos","point","adsorbentNum","adsorbentLine","nearestLine","getPintNearestLine","pointA","pointB","minx","maxx","max","nearestPoint","getNearestPointFromLine","value","_markItem","on","toCanvasPos","inPathItem","noCrossing","checkNextLineSegmentCross","pushPoint","enable","includes","singleClickComplete","canActive","isSame","inPointIndex","dbClickRemovePoint","getPointLength","removePoint","checkEndLineSegmentCross","enableDrag","dragPoint","minPoint2","pointItem","markItem","markItemPointItem","dragAll","apos","areaToPoint","enableHoverActive","disableDrag","_disableAllItemsEdit","_setMarkEditItem","_createNewMarkItem","_setIsCreateMarking","_render","_disableAllItemsHoverActive","_checkInPathItem","_checkInPathAllItems","_getIsCreateIngMarkItem","getState","getMarkData","enableEdit","disableEdit","deleteMarkItem","findIndex","deleteItem","deleteAllMarkItem","createMarkItem","_opt","exitCreate"],"mappings":"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"}